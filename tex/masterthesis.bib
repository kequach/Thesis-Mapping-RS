
@misc{noauthor_github_nodate,
	title = {{GitHub}. {Making} {Your} {Code} {Citable}.},
	url = {https://guides.github.com/activities/citable-code/.},
	abstract = {You can use third-party tools to cite and reference content on GitHub.},
	language = {en},
	note = {(accessed 2022-05-13)},
	journal = {GitHub Docs},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\TTHWCA2U\\referencing-and-citing-content.html:text/html},
}

@misc{noauthor_fair4software_2020,
	title = {{FAIR4Software} reading materials},
	url = {https://www.rd-alliance.org/group/software-source-code-ig/wiki/fair4software-reading-materials},
	abstract = {FAIR Research Software In preparation for P15, we collected FAIR Research Software material on this deidcated page.},
	language = {en},
	note = {(accessed 2022-05-14)},
	journal = {RDA},
	month = feb,
	year = {2020},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\3R4H6EBQ\\fair4software-reading-materials.html:text/html},
}
@misc{noauthor_bioconductor_nodate,
	title = {{BioConductor}},
	url = {https://www.bioconductor.org/},
	language = {en-US},
	note = {(accessed 2022-04-05)},
}

@misc{noauthor_opening_nodate,
	title = {Opening the archive, one {API} (and one {FOSDEM}) at a time},
	url = {https://www.softwareheritage.org/2017/02/04/archive-api/},
	abstract = {Today we open our public API, allowing to programmatically browse the Software Heritage archive. As we are posting this, Roberto and Stefano are keynoting at FOSDEM 2017, to discuss the role Software Heritage plays in preserving the Free Software commons. To accompany the talk today we release our first public API, which allows to navigate the entire content […]},
	language = {en-US},
	note = {(accessed 2022-04-05)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\4FEJXUSG\\archive-api.html:text/html},
}

@article{russell_large-scale_2018,
	title = {A large-scale analysis of bioinformatics code on {GitHub}},
	volume = {13},
	issn = {1932-6203},
	url = {https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0205898},
	doi = {10.1371/journal.pone.0205898},
	abstract = {In recent years, the explosion of genomic data and bioinformatic tools has been accompanied by a growing conversation around reproducibility of results and usability of software. However, the actual state of the body of bioinformatics software remains largely unknown. The purpose of this paper is to investigate the state of source code in the bioinformatics community, specifically looking at relationships between code properties, development activity, developer communities, and software impact. To investigate these issues, we curated a list of 1,720 bioinformatics repositories on GitHub through their mention in peer-reviewed bioinformatics articles. Additionally, we included 23 high-profile repositories identified by their popularity in an online bioinformatics forum. We analyzed repository metadata, source code, development activity, and team dynamics using data made available publicly through the GitHub API, as well as article metadata. We found key relationships within our dataset, including: certain scientific topics are associated with more active code development and higher community interest in the repository; most of the code in the main dataset is written in dynamically typed languages, while most of the code in the high-profile set is statically typed; developer team size is associated with community engagement and high-profile repositories have larger teams; the proportion of female contributors decreases for high-profile repositories and with seniority level in author lists; and, multiple measures of project impact are associated with the simple variable of whether the code was modified at all after paper publication. In addition to providing the first large-scale analysis of bioinformatics code to our knowledge, our work will enable future analysis through publicly available data, code, and methods. Code to generate the dataset and reproduce the analysis is provided under the MIT license at https://github.com/pamelarussell/github-bioinformatics. Data are available at https://doi.org/10.17605/OSF.IO/UWHX8.},
	language = {en},
	number = {10},
	urldate = {2022-03-17},
	journal = {PLOS ONE},
	author = {Russell, Pamela H. and Johnson, Rachel L. and Ananthan, Shreyas and Harnke, Benjamin and Carlson, Nichole E.},
	month = oct,
	year = {2018},
	note = {Publisher: Public Library of Science},
	keywords = {Bioinformatics, COMPETITOR, Computer software, FINISHED, MARKED, Open source software, Peer review, Programming languages, Reproducibility, Shannon index, Source code},
	pages = {e0205898},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\Q4PI4UCJ\\Russell et al. - 2018 - A large-scale analysis of bioinformatics code on G.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\CMHK5UPX\\article.html:text/html},
}

@article{hasselbring_fair_2019,
	title = {{FAIR} and {Open} {Computer} {Science} {Research} {Software}},
	url = {http://arxiv.org/abs/1908.05986},
	abstract = {In computational science and in computer science, research software is a central asset for research. Computational science is the application of computer science and software engineering principles to solving scientific problems, whereas computer science is the study of computer hardware and software design. The Open Science agenda holds that science advances faster when we can build on existing results. Therefore, research software has to be reusable for advancing science. Thus, we need proper research software engineering for obtaining reusable and sustainable research software. This way, software engineering methods may improve research in other disciplines. However, research in software engineering and computer science itself will also benefit from reuse when research software is involved. For good scientific practice, the resulting research software should be open and adhere to the FAIR principles (findable, accessible, interoperable and repeatable) to allow repeatability, reproducibility, and reuse. Compared to research data, research software should be both archived for reproducibility and actively maintained for reusability. The FAIR data principles do not require openness, but research software should be open source software. Established open source software licenses provide sufficient licensing options, such that it should be the rare exception to keep research software closed. We review and analyze the current state in this area in order to give recommendations for making computer science research software FAIR and open. We observe that research software publishing practices in computer science and in computational science show significant differences.},
	urldate = {2022-03-09},
	journal = {arXiv:1908.05986 [cs]},
	author = {Hasselbring, Wilhelm and Carr, Leslie and Hettrick, Simon and Packer, Heather and Tiropanis, Thanassis},
	month = aug,
	year = {2019},
	note = {arXiv: 1908.05986},
	keywords = {COMPETITOR, FINISHED, MARKED, Computer Science - Software Engineering},
	file = {arXiv Fulltext PDF:C\:\\Users\\beld\\Zotero\\storage\\8V8GP2HP\\Hasselbring et al. - 2019 - FAIR and Open Computer Science Research Software.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\beld\\Zotero\\storage\\H8WXQUWG\\1908.html:text/html},
}

@misc{hettrick_uk_2014,
	title = {{UK} {Research} {Software} {Survey} 2014},
	url = {https://zenodo.org/record/14809},
	abstract = {This spreadsheet contains the anonymised data collected as part of a survey of UK researchers in their use of research software. We asked people specifically about “research software” which we defined as: “Software that is used to generate, process or analyse results that you intend to appear in a publication (either in a journal, conference paper, monograph, book or thesis). Research software can be anything from a few lines of code written by yourself, to a professionally developed software package. Software that does not generate, process or analyse results - such as word processing software, or the use of a web search - does not count as ‘research software’ for the purposes of this survey.” We contacted 1,000 randomly selected researchers at each of 15 Russell Group universities. From the 15,000 invitations to complete the survey, we received 417 responses – a rate of 3\% which is fairly normal for a blind survey. We used Google Forms to collect responses. The responses have good representation from across the disciplines, seniorities and genders. This is a statistically significant number of responses that can be used to represent the views of people in research-intensive universities in the UK. An overview of the data is available on the worksheet "Summary data". Responses to questions are ordered by unique respondent ID. Please read the "README" worksheet for additional information about the collection and processing of this data. This survey data is licensed under a Creative Commons by Attribution licence. Copyright resides with The University of Edinburgh on behalf of the Software Sustainability Institute. Please cite as: APA Hettrick. S. J., et al. (2014). UK Research Software Survey 2014 [Data set]. doi:10.5281/zenodo.14809 Chicago S.J. Hettrick et al, UK Research Software Survey 2014 (accessed December 4, 2014), 10.5281/zenodo.14809. MLA Hettrick S.J., et al. “UK Research Software Survey 2014” ZENODO, 2014. Web. 4 December 2014. .},
	urldate = {2022-03-25},
	publisher = {Zenodo},
	author = {Hettrick, Simon and Antonioletti, Mario and Carr, Les and Chue Hong, Neil and Crouch, Stephen and De Roure, David and Emsley, Iain and Goble, Carole and Hay, Alexander and Inupakutika, Devasena and Jackson, Mike and Nenadic, Aleksandra and Parkinson, Tim and Parsons, Mark I and Pawlik, Aleksandra and Peru, Giacomo and Proeme, Arno and Robinson, John and Sufi, Shoaib},
	month = dec,
	year = {2014},
	doi = {10.5281/zenodo.14809},
	note = {Type: dataset},
	keywords = {research software, scientific software, software, software development, software engineering, software survey, software usage, survey, training},
	file = {Zenodo Snapshot:C\:\\Users\\beld\\Zotero\\storage\\BESUFIFW\\14809.html:text/html},
}

@article{hasselbring_fair_2020,
	title = {From {FAIR} research data toward {FAIR} and open research software},
	volume = {62},
	issn = {2196-7032},
	url = {http://www.degruyter.com/document/doi/10.1515/itit-2019-0040/html},
	doi = {10.1515/itit-2019-0040},
	abstract = {The Open Science agenda holds that science advances faster when we can build on existing results. Therefore, research data must be FAIR (Findable, Accessible, Interoperable, and Reusable) in order to advance the findability, reproducibility and reuse of research results. Besides the research data, all the processing steps on these data – as basis of scientific publications – have to be available, too. For good scientific practice, the resulting research software should be both open and adhere to the FAIR principles to allow full repeatability, reproducibility, and reuse. As compared to research data, research software should be both archived for reproducibility and actively maintained for reusability. The FAIR data principles do not require openness, but research software should be open source software. Established open source software licenses provide sufficient licensing options, such that it should be the rare exception to keep research software closed. We review and analyze the current state in this area in order to give recommendations for making research software FAIR and open.},
	language = {en},
	number = {1},
	urldate = {2022-03-09},
	journal = {it - Information Technology},
	author = {Hasselbring, Wilhelm and Carr, Leslie and Hettrick, Simon and Packer, Heather and Tiropanis, Thanassis},
	month = feb,
	year = {2020},
	note = {Publisher: De Gruyter Oldenbourg},
	keywords = {FINISHED, research software, FAIR principles, open source software},
	pages = {39--47},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\C8RLYHL9\\Hasselbring et al. - 2020 - From FAIR research data toward FAIR and open resea.pdf:application/pdf},
}

@article{hasselbring_open_2020,
	title = {Open {Source} {Research} {Software}},
	volume = {53},
	issn = {1558-0814},
	doi = {10.1109/MC.2020.2998235},
	abstract = {Reports on the need to make make software open source. It should be both archived for reproducibility and actively maintained for reusability. In computational and computer science, research software is a central asset for development activities. For good scientific practice, the resulting research software should be open source. Established open source software licenses provide sufficient options for granting permissions such that it should be the rare exception to keep research software closed. Proper engineering is required for obtaining reusable and sustainable research software. This way, software engineering methods may improve research in other disciplines. However, research in software engineering and computer science itself will also benefit when programs are reused. To study the state of the art in this field, we analyzed research software publishing practices in computer and computational science and observed significant differences: computational science emphasizes reproducibility, while computer science emphasizes reuse.},
	number = {8},
	journal = {Computer},
	author = {Hasselbring, Wilhelm and Carr, Leslie and Hettrick, Simon and Packer, Heather and Tiropanis, Thanassis},
	month = aug,
	year = {2020},
	note = {Conference Name: Computer},
	keywords = {FINISHED, Open source software, Artificial intelligence, Licenses, Scientific computing, Software engineering},
	pages = {84--88},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\8U5VQT6W\\9153295.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\WWNX95IY\\Hasselbring et al. - 2020 - Open Source Research Software.pdf:application/pdf},
}

@misc{noauthor_binderhub_nodate,
	title = {{BinderHub}},
	url = {https://binderhub.readthedocs.io/en/latest/},
	note = {(accessed 2022-03-22)},
	file = {BinderHub — BinderHub 0.1.0 documentation:C\:\\Users\\beld\\Zotero\\storage\\9CTUCSJU\\latest.html:text/html},
}

@article{halle_streamlining_2018,
	title = {Streamlining the {Inclusion} of {Computer} {Experiments} {In} a {Research} {Paper}},
	volume = {51},
	issn = {1558-0814},
	doi = {10.1109/MC.2018.2876075},
	abstract = {Designing clean, reusable, and repeatable experiments for a research paper does not have to be difficult. We report on our efforts to create an integrated toolchain for running, processing, and including the results of computer experiments in scientific publications.},
	number = {11},
	journal = {Computer},
	author = {Halle, Sylvain and Khoury, Raphael and Awesso, Mewena},
	month = nov,
	year = {2018},
	note = {Conference Name: Computer},
	keywords = {Design for experiments, Java, Publishing, Task analysis, Tools, Writing},
	pages = {78--89},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\4CMJ75DD\\8625929.html:text/html},
}

@misc{noauthor_sobigdataeu_nodate,
	title = {{SoBigData}.eu},
	url = {http://sobigdata.eu/index},
	note = {(accessed 2022-03-22)},
	file = {index | SoBigData.eu:C\:\\Users\\beld\\Zotero\\storage\\UCKUU73H\\index.html:text/html},
}

@misc{noauthor_journal_nodate,
	title = {Journal of {Open} {Research} {Software}},
	url = {http://openresearchsoftware.metajnl.com/},
	abstract = {The Journal of Open Research Software (JORS) features peer reviewed Software Metapapers describing research software with high reuse potential. We are working with a number of specialist and institutional repositories to ensure that the associated software is professionally archived, preserved, and is openly available. Equally importantly, the software and the papers will be citable, and reuse will be tracked.JORS also publishes full-length research papers that cover different aspects of creating, maintaining and evaluating open source research software. The aim of the section is to promote the dissemination of best practice and experience related to the development and maintenance of reusable, sustainable research software.},
	language = {en},
	note = {(accessed 2022-03-22)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\GHN2Q39Q\\openresearchsoftware.metajnl.com.html:text/html},
}

@misc{noauthor_journal_nodate-1,
	title = {Journal of {Open} {Source} {Software}},
	url = {https://joss.theoj.org},
	abstract = {Journal of Open Source Software (JOSS) is a developer friendly, open access journal for research software packages.},
	language = {en},
	note = {(accessed 2022-03-22)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\C5RRT3MJ\\joss.theoj.org.html:text/html},
}

@incollection{fecher_open_2014,
	address = {Cham},
	title = {Open {Science}: {One} {Term}, {Five} {Schools} of {Thought}},
	isbn = {978-3-319-00026-8},
	shorttitle = {Open {Science}},
	url = {https://doi.org/10.1007/978-3-319-00026-8_2},
	abstract = {Open Science is an umbrella term encompassing a multitude of assumptions about the future of knowledge creation and dissemination. Based on a literature review, this chapter aims at structuring the overall discourse by proposing five Open Science schools of thought: The infrastructure school (which is concerned with the technological architecture), the public school (which is concerned with the accessibility of knowledge creation), the measurement school (which is concerned with alternative impact measurement), the democratic school (which is concerned with access to knowledge) and the pragmatic school (which is concerned with collaborative research).},
	language = {en},
	urldate = {2022-03-21},
	booktitle = {Opening {Science}: {The} {Evolving} {Guide} on {How} the {Internet} is {Changing} {Research}, {Collaboration} and {Scholarly} {Publishing}},
	publisher = {Springer International Publishing},
	author = {Fecher, Benedikt and Friesike, Sascha},
	editor = {Bartling, Sönke and Friesike, Sascha},
	year = {2014},
	doi = {10.1007/978-3-319-00026-8_2},
	keywords = {Citizen Science, Knowledge Creation, Open Access Journal, Scientific Impact, Scientific Practice},
	pages = {17--47},
	file = {Springer Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\2AW8YXUK\\Fecher and Friesike - 2014 - Open Science One Term, Five Schools of Thought.pdf:application/pdf},
}

@inproceedings{sheoran_understanding_2014,
	address = {New York, NY, USA},
	series = {{MSR} 2014},
	title = {Understanding "watchers" on {GitHub}},
	isbn = {978-1-4503-2863-0},
	url = {https://doi.org/10.1145/2597073.2597114},
	doi = {10.1145/2597073.2597114},
	abstract = {Users on GitHub can watch repositories to receive notifications about project activity. This introduces a new type of passive project membership. In this paper, we investigate the behavior of watchers and their contribution to the projects they watch. We find that a subset of project watchers begin contributing to the project and those contributors account for a significant percentage of contributors on the project. As contributors, watchers are more confident and contribute over a longer period of time in a more varied way than other contributors. This is likely attributable to the knowledge gained through project notifications.},
	urldate = {2022-03-20},
	booktitle = {Proceedings of the 11th {Working} {Conference} on {Mining} {Software} {Repositories}},
	publisher = {Association for Computing Machinery},
	author = {Sheoran, Jyoti and Blincoe, Kelly and Kalliamvakou, Eirini and Damian, Daniela and Ell, Jordan},
	year = {2014},
	keywords = {GitHub, Repositories, Software Teams, Watchers},
	pages = {336--339},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\86G2N8Z4\\Sheoran et al. - 2014 - Understanding watchers on GitHub.pdf:application/pdf},
}

@inproceedings{ma_what_2016,
	title = {What {Are} the {Dominant} {Projects} in the {GitHub} {Python} {Ecosystem}?},
	doi = {10.1109/TSA.2016.23},
	abstract = {GitHub, a popular social-software-development platform, has fostered a variety of software ecosystems where projects depend on one another and co-evolve together. The projects located in the central hub of the ecosystem are supposed to be important and could affect a number of other projects. However, few researches have investigated the dominant projects in a software ecosystem. In this study, we aim to identify the most influential projects in the GitHub Python ecosystem. We first construct the GitHub Python ecosystem with 19797 projects by identifying their inter-dependencies. Then, we calculate the four kinds of centrality metrics to measure the centrality and influence of each project in the ecosystem. Finally, we evaluate the project's popularity using GitHub social methods and compare the consistency of the two measurements. Our results indicate that 1) the most influential projects are mostly custom libraries; 2) only a small number of projects have large values of the centrality metrics; 3) the dominant projects are not always popular among the GitHub users. Our results help the researchers and practitioners gain a better understanding of the GitHub Python ecosystem.},
	booktitle = {2016 {Third} {International} {Conference} on {Trustworthy} {Systems} and their {Applications} ({TSA})},
	author = {Ma, Wanwangying and Chen, Lin and Zhou, Yuming and Xu, Baowen},
	month = sep,
	year = {2016},
	keywords = {centrality and influence, Ecosystems, Encoding, GitHub Python ecosystem, inter-dependencies, Libraries, Measurement, popularity, Social network services, Software, Standards},
	pages = {87--95},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\3A4ANBGL\\7780230.html:text/html},
}

@article{blincoe_understanding_2016,
	title = {Understanding the popular users: {Following}, affiliation influence and leadership on {GitHub}},
	volume = {70},
	issn = {0950-5849},
	shorttitle = {Understanding the popular users},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584915001688},
	doi = {10.1016/j.infsof.2015.10.002},
	abstract = {Context: the ability to follow other users and projects on GitHub has introduced a new layer of open source software development participants who observe but do not contribute to projects. It has not been fully explored how following others influences the actions of GitHub users. Objective: this paper studies the motivation behind following (or not following) others and the influence of popular users on their followers. Method: a mixed methods research approach was used including a survey of 800 GitHub users to uncover the reasons for following on GitHub and a complementary quantitative analysis of the activity of GitHub users to examine influence. Our quantitative analysis studied 199 popular (most followed) users and their followers. Results: we found that popular users do influence their followers by guiding them to new projects. As a user’s popularity increases, so does their rate of influence, yet the same is not true for a popular user’s rate of contribution. Conclusions: these results indicate that a new type of leadership is emerging through GitHub’s following feature and popularity can be more important than contribution in influencing others. We discuss implications of popularity and influence and their impact on social structure and leadership on OSS projects.},
	language = {en},
	urldate = {2022-03-20},
	journal = {Information and Software Technology},
	author = {Blincoe, Kelly and Sheoran, Jyoti and Goggins, Sean and Petakovic, Eva and Damian, Daniela},
	month = feb,
	year = {2016},
	keywords = {Open source software, GitHub, Following, Influence, Leadership, Social computing},
	pages = {30--39},
	file = {ScienceDirect Snapshot:C\:\\Users\\beld\\Zotero\\storage\\HD7IA775\\S0950584915001688.html:text/html},
}

@article{borges_understanding_2016,
	title = {Understanding the {Factors} that {Impact} the {Popularity} of {GitHub} {Repositories}},
	url = {http://arxiv.org/abs/1606.04984},
	doi = {10.1109/ICSME.2016.31},
	abstract = {Software popularity is a valuable information to modern open source developers, who constantly want to know if their systems are attracting new users, if new releases are gaining acceptance, or if they are meeting user's expectations. In this paper, we describe a study on the popularity of software systems hosted at GitHub, which is the world's largest collection of open source software. GitHub provides an explicit way for users to manifest their satisfaction with a hosted repository: the stargazers button. In our study, we reveal the main factors that impact the number of stars of GitHub projects, including programming language and application domain. We also study the impact of new features on project popularity. Finally, we identify four main patterns of popularity growth, which are derived after clustering the time series representing the number of stars of 2,279 popular GitHub repositories. We hope our results provide valuable insights to developers and maintainers, which can help them on building and evolving systems in a competitive software market.},
	urldate = {2022-03-20},
	journal = {2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	author = {Borges, Hudson and Hora, Andre and Valente, Marco Tulio},
	month = oct,
	year = {2016},
	note = {arXiv: 1606.04984},
	keywords = {Computer Science - Software Engineering, Computer Science - Social and Information Networks},
	pages = {334--344},
	file = {arXiv Fulltext PDF:C\:\\Users\\beld\\Zotero\\storage\\8WYL2632\\Borges et al. - 2016 - Understanding the Factors that Impact the Populari.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\beld\\Zotero\\storage\\V3WHKRIW\\1606.html:text/html},
}

@article{hu_influence_2016,
	title = {Influence analysis of {Github} repositories},
	volume = {5},
	issn = {2193-1801},
	url = {https://doi.org/10.1186/s40064-016-2897-7},
	doi = {10.1186/s40064-016-2897-7},
	abstract = {With the support of cloud computing techniques, social coding platforms have changed the style of software development. Github is now the most popular social coding platform and project hosting service. Software developers of various levels keep entering Github, and use Github to save their public and private software projects. The large amounts of software developers and software repositories on Github are posing new challenges to the world of software engineering. This paper tries to tackle one of the important problems: analyzing the importance and influence of Github repositories. We proposed a HITS based influence analysis on graphs that represent the star relationship between Github users and repositories. A weighted version of HITS is applied to the overall star graph, and generates a different set of top influential repositories other than the results from standard version of HITS algorithm. We also conduct the influential analysis on per-month star graph, and study the monthly influence ranking of top repositories.},
	number = {1},
	urldate = {2022-03-20},
	journal = {SpringerPlus},
	author = {Hu, Yan and Zhang, Jun and Bai, Xiaomei and Yu, Shuo and Yang, Zhuo},
	month = aug,
	year = {2016},
	keywords = {Github, HITS, Influence analysis, Social coding},
	pages = {1268},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\XE9UQKKM\\Hu et al. - 2016 - Influence analysis of Github repositories.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\HAYKJWTQ\\s40064-016-2897-7.html:text/html},
}

@inproceedings{kochhar_empirical_2013,
	title = {An {Empirical} {Study} of {Adoption} of {Software} {Testing} in {Open} {Source} {Projects}},
	doi = {10.1109/QSIC.2013.57},
	abstract = {Testing is an indispensable part of software development efforts. It helps to improve the quality of software systems by finding bugs and errors during development and deployment. Huge amount of resources are spent on testing efforts. However, to what extent are they used in practice? In this study, we investigate the adoption of testing in open source projects. We study more than 20,000 non-trivial software projects and explore the correlation of test cases with various project development characteristics including: project size, development team size, number of bugs, number of bug reporters, and the programming languages of these projects.},
	booktitle = {2013 13th {International} {Conference} on {Quality} {Software}},
	author = {Kochhar, Pavneet Singh and Bissyandé, Tegawendé F. and Lo, David and Jiang, Lingxiao},
	month = jul,
	year = {2013},
	note = {ISSN: 2332-662X},
	keywords = {Writing, Software, Adequacy, Computer bugs, Computer languages, Correlation, Empirical study, Software testing, Test cases},
	pages = {103--112},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\25XUZUVN\\6605914.html:text/html;Submitted Version:C\:\\Users\\beld\\Zotero\\storage\\NR5CA6LA\\Kochhar et al. - 2013 - An Empirical Study of Adoption of Software Testing.pdf:application/pdf},
}

@inproceedings{ray_large_2014,
	address = {New York, NY, USA},
	series = {{FSE} 2014},
	title = {A large scale study of programming languages and code quality in github},
	isbn = {978-1-4503-3056-5},
	url = {https://doi.org/10.1145/2635868.2635922},
	doi = {10.1145/2635868.2635922},
	abstract = {What is the effect of programming languages on software quality? This question has been a topic of much debate for a very long time. In this study, we gather a very large data set from GitHub (729 projects, 80 Million SLOC, 29,000 authors, 1.5 million commits, in 17 languages) in an attempt to shed some empirical light on this question. This reasonably large sample size allows us to use a mixed-methods approach, combining multiple regression modeling with visualization and text analytics, to study the effect of language features such as static v.s. dynamic typing, strong v.s. weak typing on software quality. By triangulating findings from different methods, and controlling for confounding effects such as team size, project size, and project history, we report that language design does have a significant, but modest effect on software quality. Most notably, it does appear that strong typing is modestly better than weak typing, and among functional languages, static typing is also somewhat better than dynamic typing. We also find that functional languages are somewhat better than procedural languages. It is worth noting that these modest effects arising from language design are overwhelmingly dominated by the process factors such as project size, team size, and commit size. However, we hasten to caution the reader that even these modest effects might quite possibly be due to other, intangible process factors, e.g., the preference of certain personality types for functional, static and strongly typed languages.},
	urldate = {2022-03-20},
	booktitle = {Proceedings of the 22nd {ACM} {SIGSOFT} {International} {Symposium} on {Foundations} of {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Ray, Baishakhi and Posnett, Daryl and Filkov, Vladimir and Devanbu, Premkumar},
	month = nov,
	year = {2014},
	keywords = {bug fix, code quality, empirical research, programming language, regression analysis, software domain, type system},
	pages = {155--165},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\PYGAYQ7W\\Ray et al. - 2014 - A large scale study of programming languages and c.pdf:application/pdf},
}

@inproceedings{di_cosmo_software_2017,
	address = {Kyoto, Japan},
	title = {Software {Heritage}: {Why} and {How} to {Preserve} {Software} {Source} {Code}},
	shorttitle = {Software {Heritage}},
	url = {https://hal.archives-ouvertes.fr/hal-01590958},
	abstract = {Software is now a key component present in all aspects of our society. Its preservation has attracted growing attention over the past years within the digital preservation community. We claim that source code—the only representation of software that contains human readable knowledge—is a precious digital object that needs special handling: it must be a first class citizen in the preservation landscape and we need to take action immediately, given the increasingly more frequent incidents that result in permanent losses of source code collections. In this paper we present Software Heritage, an ambitious initiative to collect, preserve, and share the entire corpus of publicly accessible software source code. We discuss the archival goals of the project, its use cases and role as a participant in the broader digital preservation ecosystem, and detail its key design decisions. We also report on the project road map and the current status of the Software Heritage archive that, as of early 2017, has collected more than 3 billion unique source code files and 700 million commits coming from more than 50 million software development projects.},
	urldate = {2022-03-17},
	booktitle = {{iPRES} 2017 - 14th {International} {Conference} on {Digital} {Preservation}},
	author = {Di Cosmo, Roberto and Zacchiroli, Stefano},
	month = sep,
	year = {2017},
	keywords = {open source software, cultural heritage, digital preservation, free software, source code},
	pages = {1--10},
	file = {HAL PDF Full Text:C\:\\Users\\beld\\Zotero\\storage\\KSHZXPUB\\Di Cosmo and Zacchiroli - 2017 - Software Heritage Why and How to Preserve Softwar.pdf:application/pdf},
}

@article{druskat_citation_2021,
	title = {Citation {File} {Format}},
	url = {https://zenodo.org/record/5171937},
	doi = {10.5281/zenodo.5171937},
	abstract = {CITATION.cff files are plain text files with human- and machine-readable citation information for software. Code developers can include them in their repositories to let others know how to correctly cite their software. This is the specification for the Citation File Format.},
	language = {eng},
	urldate = {2022-03-17},
	author = {Druskat, Stephan and Spaaks, Jurriaan H. and Chue Hong, Neil and Haines, Robert and Baker, James and Bliven, Spencer and Willighagen, Egon and Pérez-Suárez, David and Konovalov, Alexander},
	month = aug,
	year = {2021},
	note = {Publisher: Zenodo},
	keywords = {research software, CFF, citation file format, citation files, credit, file format, software citation, software sustainability, YAML},
	file = {Zenodo Snapshot:C\:\\Users\\beld\\Zotero\\storage\\BBLHDTRW\\5171937.html:text/html},
}

@misc{spaaks_research_2020,
	title = {Research {Software} {Directory}},
	url = {https://zenodo.org/record/4311332},
	abstract = {The Research Software Directory is a content management system for research software. It aims to improve the findability, citability, and reproducibility of the software packages advertised in it, while enabling a qualitative assessment of their impact.},
	urldate = {2022-03-17},
	publisher = {Zenodo},
	author = {Spaaks, Jurriaan H. and Klaver, Tom and Verhoeven, Stefan and Diblen, Faruk and Maassen, Jason and Tjong Kim Sang, Erik and Pawar, Pushpanjali and Meijer, Christiaan and Ridder, Lars and Kulik, Lode and Bakker, Tom and van Hees, Vincent and Bogaardt, Laurens and Mendrik, Adriënne and van Es, Bram and Attema, Jisk and van Hage, Willem and Ranguelova, Elena and van Nieuwpoort, Rob and Gey, Ronny and Zach, Hoskins},
	month = dec,
	year = {2020},
	doi = {10.5281/zenodo.4311332},
	keywords = {research software, CRIS, Current Research Information Systems, FAIR for software, re-usable software, reproducible research, RSE},
	file = {Zenodo Snapshot:C\:\\Users\\beld\\Zotero\\storage\\3BF4G2DX\\4311332.html:text/html},
}

@article{mons_cloudy_2017,
	title = {Cloudy, increasingly {FAIR}; revisiting the {FAIR} {Data} guiding principles for the {European} {Open} {Science} {Cloud}},
	volume = {37},
	issn = {0167-5265},
	url = {https://content-iospress-com.proxy.library.uu.nl/articles/information-services-and-use/isu824},
	doi = {10.3233/ISU-170824},
	abstract = {The FAIR Data Principles propose that all scholarly output should be Findable, Accessible, Interoperable, and Reusable. As a set of guiding principles, expressing only the kinds of behaviours that researchers should expect from contemporary data reso},
	language = {en},
	number = {1},
	urldate = {2022-03-13},
	journal = {Information Services \& Use},
	author = {Mons, Barend and Neylon, Cameron and Velterop, Jan and Dumontier, Michel and da Silva Santos, Luiz Olavo Bonino and Wilkinson, Mark D.},
	month = mar,
	year = {2017},
	note = {Publisher: IOS Press},
	keywords = {FINISHED, MARKED},
	pages = {49--56},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\MA5DTLTE\\Mons et al. - 2017 - Cloudy, increasingly FAIR\; revisiting the FAIR Dat.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\ER23UPLX\\isu824.html:text/html},
}

@article{boeckhout_fair_2018,
	title = {The {FAIR} guiding principles for data stewardship: fair enough?},
	volume = {26},
	issn = {1018-4813, 1476-5438},
	shorttitle = {The {FAIR} guiding principles for data stewardship},
	url = {http://www.nature.com/articles/s41431-018-0160-0},
	doi = {10.1038/s41431-018-0160-0},
	abstract = {The FAIR guiding principles for research data stewardship (ﬁndability, accessibility, interoperability, and reusability) look set to become a cornerstone of research in the life sciences. A critical appraisal of these principles in light of ongoing discussions and developments about data sharing is in order. The FAIR principles point the way forward for facilitating data sharing more systematically—provided that a number of ethical, methodological, and organisational challenges are addressed as well.},
	language = {en},
	number = {7},
	urldate = {2022-03-09},
	journal = {European Journal of Human Genetics},
	author = {Boeckhout, Martin and Zielhuis, Gerhard A. and Bredenoord, Annelien L.},
	month = jul,
	year = {2018},
	keywords = {FINISHED, MARKED},
	pages = {931--936},
	file = {Boeckhout et al. - 2018 - The FAIR guiding principles for data stewardship .pdf:C\:\\Users\\beld\\Zotero\\storage\\C68TF3T4\\Boeckhout et al. - 2018 - The FAIR guiding principles for data stewardship .pdf:application/pdf},
}

@book{borgman_big_2015,
	address = {Cambridge, MA, USA},
	title = {Big {Data}, {Little} {Data}, {No} {Data}: {Scholarship} in the {Networked} {World}},
	isbn = {978-0-262-02856-1},
	shorttitle = {Big {Data}, {Little} {Data}, {No} {Data}},
	abstract = {An examination of the uses of data within a changing knowledge infrastructure, offering analysis and case studies from the sciences, social sciences, and humanities.},
	language = {en},
	publisher = {MIT Press},
	author = {Borgman, Christine L.},
	month = jan,
	year = {2015},
}

@article{ringersma_i-pass_2021,
	title = {Do {I}-{PASS} for {FAIR}? {Measuring} the {FAIR}-ness of {Research} {Organizations}},
	volume = {20},
	issn = {1683-1470},
	shorttitle = {Do {I}-{PASS} for {FAIR}?},
	url = {https://datascience.codata.org/article/10.5334/dsj-2021-030/},
	doi = {10.5334/dsj-2021-030},
	language = {en},
	number = {1},
	urldate = {2022-03-09},
	journal = {Data Science Journal},
	author = {Ringersma, J. and Miedema, M.},
	month = oct,
	year = {2021},
	keywords = {FINISHED},
	pages = {30},
	file = {Ringersma and Miedema - 2021 - Do I-PASS for FAIR Measuring the FAIR-ness of Res.pdf:C\:\\Users\\beld\\Zotero\\storage\\UIW8GFRV\\Ringersma and Miedema - 2021 - Do I-PASS for FAIR Measuring the FAIR-ness of Res.pdf:application/pdf},
}

@inproceedings{wolf_reusability_2021,
	title = {Reusability {First}: {Toward} {FAIR} {Workflows}},
	shorttitle = {Reusability {First}},
	doi = {10.1109/Cluster48925.2021.00053},
	abstract = {The FAIR principles of open science (Findable, Accessible, Interoperable, and Reusable) have had transformative effects on modern large-scale computational science. In particular, they have encouraged more open access to and use of data, an important consideration as collaboration among teams of researchers accelerates and the use of workflows by those teams to solve problems increases. How best to apply the FAIR principles to workflows themselves, and software more generally, is not yet well understood. We argue that the software engineering concept of technical debt management provides a useful guide for application of those principles to workflows, and in particular that it implies reusability should be considered as ‘first among equals’. Moreover, our approach recognizes a continuum of reusability where we can make explicit and selectable the tradeoffs required in workflows for both their users and developers.To this end, we propose a new abstraction approach for reusable workflows, with demonstrations for both synthetic workloads and real-world computational biology workflows. Through application of novel systems and tools that are based on this abstraction, these experimental workflows are refactored to rightsize the granularity of workflow components to efficiently fill the gap between end-user simplicity and general customizability. Our work makes it easier to selectively reason about and automate the connections between trade-offs across user and developer concerns when exposing degrees of freedom for reuse. Additionally, by exposing fine-grained reusability abstractions we enable performance optimizations, as we demonstrate on both institutional-scale and leadership-class HPC resources.},
	booktitle = {2021 {IEEE} {International} {Conference} on {Cluster} {Computing} ({CLUSTER})},
	author = {Wolf, Matthew and Logan, Jeremy and Mehta, Kshitij and Jacobson, Daniel and Cashman, Mikaela and Walker, Angelica M. and Eisenhauer, Greg and Widener, Patrick and Cliff, Ashley},
	month = sep,
	year = {2021},
	note = {ISSN: 2168-9253},
	keywords = {FINISHED, Scientific computing, Tools, Automation, Data encapsulation, Distributed Information systems, FAIR, Metadata, Middleware, Open Access, Reusability, Semantics, Workflows},
	pages = {444--455},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\95537AVJ\\9556094.html:text/html},
}

@article{garcia_ten_2020,
	title = {Ten simple rules for making training materials {FAIR}},
	volume = {16},
	issn = {1553-7358},
	url = {https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007854},
	doi = {10.1371/journal.pcbi.1007854},
	abstract = {Author summary Everything we do today is becoming more and more reliant on the use of computers. The field of biology is no exception; but most biologists receive little or no formal preparation for the increasingly computational aspects of their discipline. In consequence, informal training courses are often needed to plug the gaps; and the demand for such training is growing worldwide. To meet this demand, some training programs are being expanded, and new ones are being developed. Key to both scenarios is the creation of new course materials. Rather than starting from scratch, however, it’s sometimes possible to repurpose materials that already exist. Yet finding suitable materials online can be difficult: They’re often widely scattered across the internet or hidden in their home institutions, with no systematic way to find them. This is a common problem for all digital objects. The scientific community has attempted to address this issue by developing a set of rules (which have been called the Findable, Accessible, Interoperable and Reusable [FAIR] principles) to make such objects more findable and reusable. Here, we show how to apply these rules to help make training materials easier to find, (re)use, and adapt, for the benefit of all.},
	language = {en},
	number = {5},
	urldate = {2022-03-11},
	journal = {PLOS Computational Biology},
	author = {Garcia, Leyla and Batut, Bérénice and Burke, Melissa L. and Kuzak, Mateusz and Psomopoulos, Fotis and Arcila, Ricardo and Attwood, Teresa K. and Beard, Niall and Carvalho-Silva, Denise and Dimopoulos, Alexandros C. and Angel, Victoria Dominguez del and Dumontier, Michel and Gurwitz, Kim T. and Krause, Roland and McQuilton, Peter and Pera, Loredana Le and Morgan, Sarah L. and Rauste, Päivi and Via, Allegra and Kahlem, Pascal and Rustici, Gabriella and Gelder, Celia W. G. van and Palagi, Patricia M.},
	month = may,
	year = {2020},
	note = {Publisher: Public Library of Science},
	keywords = {Bioinformatics, Computer software, FINISHED, Open source software, Metadata, Computational biology, Internet, Ontologies, Trainees},
	pages = {e1007854},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\5BLUMZ3E\\Garcia et al. - 2020 - Ten simple rules for making training materials FAI.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\XV63FUXY\\article.html:text/html},
}

@article{van_lissa_worcs_2021,
	title = {{WORCS}: {A} workflow for open reproducible code in science},
	volume = {4},
	issn = {2451-8484},
	shorttitle = {{WORCS}},
	url = {https://content-iospress-com.proxy.library.uu.nl/articles/data-science/ds210031},
	doi = {10.3233/DS-210031},
	abstract = {Adopting open science principles can be challenging, requiring conceptual education and training in the use of new tools. This paper introduces the Workflow for Open Reproducible Code in Science (WORCS): A step-by-step procedure that researchers can},
	language = {en},
	number = {1},
	urldate = {2022-03-11},
	journal = {Data Science},
	author = {Van Lissa, Caspar J. and Brandmaier, Andreas M. and Brinkman, Loek and Lamprecht, Anna-Lena and Peikert, Aaron and Struiksma, Marijn E. and Vreede, Barbara M. I.},
	month = jan,
	year = {2021},
	note = {Publisher: IOS Press},
	keywords = {FINISHED},
	pages = {29--49},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\P57D2XSZ\\Van Lissa et al. - 2021 - WORCS A workflow for open reproducible code in sc.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\SEK56S9Z\\ds210031.html:text/html},
}

@article{trisovic_large-scale_2022,
	title = {A large-scale study on research code quality and execution},
	volume = {9},
	copyright = {2022 The Author(s)},
	issn = {2052-4463},
	url = {http://www.nature.com/articles/s41597-022-01143-6},
	doi = {10.1038/s41597-022-01143-6},
	abstract = {This article presents a study on the quality and execution of research code from publicly-available replication datasets at the Harvard Dataverse repository. Research code is typically created by a group of scientists and published together with academic papers to facilitate research transparency and reproducibility. For this study, we define ten questions to address aspects impacting research reproducibility and reuse. First, we retrieve and analyze more than 2000 replication datasets with over 9000 unique R files published from 2010 to 2020. Second, we execute the code in a clean runtime environment to assess its ease of reuse. Common coding errors were identified, and some of them were solved with automatic code cleaning to aid code execution. We find that 74\% of R files failed to complete without error in the initial execution, while 56\% failed when code cleaning was applied, showing that many errors can be prevented with good coding practices. We also analyze the replication datasets from journals’ collections and discuss the impact of the journal policy strictness on the code re-execution rate. Finally, based on our results, we propose a set of recommendations for code dissemination aimed at researchers, journals, and repositories.},
	language = {en},
	number = {1},
	urldate = {2022-03-11},
	journal = {Scientific Data},
	author = {Trisovic, Ana and Lau, Matthew K. and Pasquier, Thomas and Crosas, Mercè},
	month = feb,
	year = {2022},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Software, Information technology, READ, Research data},
	pages = {60},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\2T87F6XG\\Trisovic et al. - 2022 - A large-scale study on research code quality and e.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\LBN8L9KB\\s41597-022-01143-6.html:text/html},
}

@article{anzt_environment_2021,
	title = {An environment for sustainable research software in {Germany} and beyond: current state, open challenges, and call for action},
	volume = {9},
	issn = {2046-1402},
	shorttitle = {An environment for sustainable research software in {Germany} and beyond},
	url = {https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7845155/},
	doi = {10.12688/f1000research.23224.2},
	abstract = {Research software has become a central asset in academic research. It optimizes existing and enables new research methods, implements and embeds research knowledge, and constitutes an essential research product in itself. Research software must be sustainable in order to understand, replicate, reproduce, and build upon existing research or conduct new research effectively. In other words, software must be available, discoverable, usable, and adaptable to new needs, both now and in the future. Research software therefore requires an environment that supports sustainability.,  Hence, a change is needed in the way research software development and maintenance are currently motivated, incentivized, funded, structurally and infrastructurally supported, and legally treated. Failing to do so will threaten the quality and validity of research. In this paper, we identify challenges for research software sustainability in Germany and beyond, in terms of motivation, selection, research software engineering personnel, funding, infrastructure, and legal aspects. Besides researchers, we specifically address political and academic decision-makers to increase awareness of the importance and needs of sustainable research software practices. In particular, we recommend strategies and measures to create an environment for sustainable research software, with the ultimate goal to ensure that software-driven research is valid, reproducible and sustainable, and that software is recognized as a first class citizen in research. This paper is the outcome of two workshops run in Germany in 2019, at deRSE19 - the first International Conference of Research Software Engineers in Germany - and a dedicated DFG-supported follow-up workshop in Berlin.},
	urldate = {2022-03-11},
	journal = {F1000Research},
	author = {Anzt, Hartwig and Bach, Felix and Druskat, Stephan and Löffler, Frank and Loewe, Axel and Renard, Bernhard Y. and Seemann, Gunnar and Struck, Alexander and Achhammer, Elke and Aggarwal, Piush and Appel, Franziska and Bader, Michael and Brusch, Lutz and Busse, Christian and Chourdakis, Gerasimos and Dabrowski, Piotr Wojciech and Ebert, Peter and Flemisch, Bernd and Friedl, Sven and Fritzsch, Bernadette and Funk, Maximilian D. and Gast, Volker and Goth, Florian and Grad, Jean-Noël and Hegewald, Jan and Hermann, Sibylle and Hohmann, Florian and Janosch, Stephan and Kutra, Dominik and Linxweiler, Jan and Muth, Thilo and Peters-Kottig, Wolfgang and Rack, Fabian and Raters, Fabian H.C. and Rave, Stephan and Reina, Guido and Reißig, Malte and Ropinski, Timo and Schaarschmidt, Joerg and Seibold, Heidi and Thiele, Jan P. and Uekermann, Benjamin and Unger, Stefan and Weeber, Rudolf},
	month = jan,
	year = {2021},
	pmid = {33552475},
	pmcid = {PMC7845155},
	pages = {295},
	file = {PubMed Central Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\K8E2KPR5\\Anzt et al. - 2021 - An environment for sustainable research software i.pdf:application/pdf},
}

@article{peer_challenges_2021,
	title = {Challenges of {Curating} for {Reproducible} and {FAIR} {Research} {Output}},
	language = {en},
	author = {Peer, Limor and Arguillas, Florio and Honeyman, Tom and Miljković, Nadica and Gehlen, Karsten Peters-von},
	month = jul,
	year = {2021},
	pages = {26},
	file = {Peer et al. - Challenges of Curating for Reproducible and FAIR R.pdf:C\:\\Users\\beld\\Zotero\\storage\\AMZ58DQ2\\Peer et al. - Challenges of Curating for Reproducible and FAIR R.pdf:application/pdf},
}

@article{katz_working_2021,
	title = {Working {Towards} {Understanding} the {Role} of {FAIR} for {Machine} {Learning}},
	url = {https://repository.publisso.de/resource/frl:6429415},
	doi = {10.4126/FRL01-006429415},
	abstract = {The FAIR Guiding Principles aim to improve ﬁndability, accessibility, interoperability and reusability for both humans and machines, initially aimed at scientiﬁc data, but also intended to apply to all sorts of research digital objects, with recent developments about their modiﬁcation and application to software and computational workﬂows. In this position paper we argue that the FAIR principles also can apply to machine learning tools and models, though a direct application is not always possible as machine learning combines aspects of data and software. Here we discuss some of the elements of machine learning that lead to the need for some adaptation of the original FAIR principles, along with stakeholders that would beneﬁt from this adaptation. We introduce the initial steps towards this adaptation, i.e., creating a community around it, some possible beneﬁts beyond FAIR, and some of the open questions that such a community could tackle.},
	language = {en},
	urldate = {2022-03-09},
	author = {Katz, Daniel S. and Psomopoulos, Fotis and Castro, Leyla Jael},
	year = {2021},
	note = {Medium: application/pdf
Publisher: PUBLISSO},
	keywords = {FAIR, Metadata, Machine Learning},
	file = {Castro et al. - 2021 - Working Towards Understanding the Role of FAIR for.pdf:C\:\\Users\\beld\\Zotero\\storage\\RWWMGWNW\\Castro et al. - 2021 - Working Towards Understanding the Role of FAIR for.pdf:application/pdf},
}
@book{directorate-general_for_research_and_innovation_european_commission_turning_2018,
	address = {LU},
	title = {Turning {FAIR} into reality: final report and action plan from the {European} {Commission} expert group on {FAIR} data},
	isbn = {978-92-79-96546-3},
	shorttitle = {Turning {FAIR} into reality},
	url = {https://data.europa.eu/doi/10.2777/1524},
	abstract = {To take advantage of the digital revolution, to accelerate research, to engage the power of machine analysis at scale while ensuring transparency, reproducibility and societal utility, data and other digital objects created by and used for research need to be FAIR. Advancing the global Open Science movement and the development of the European Open Science Cloud is the unambiguous objective for this report. This document is both a report and an action plan for turning FAIR into reality. It offers a survey and analysis of what is needed to implement FAIR and it provides a set of concrete recommendations and actions for stakeholders in Europe and beyond. It is our intention that it should provide a framework that will greatly assist the creation of the European Open Science Cloud, and will be applicable to other comparable initiatives globally.},
	language = {eng},
	urldate = {2022-05-20},
	publisher = {Publications Office of the European Union},
	author = {{Directorate-General for Research and Innovation (European Commission)}},
	year = {2018},
}

@misc{katz_fair4rs_2021,
	title = {The {FAIR4RS} team: {Working} together to make research software {FAIR}},
	shorttitle = {The {FAIR4RS} team},
	url = {https://zenodo.org/record/5037157},
	abstract = {The FAIR For Research Software Working Group (FAIR4RS WG) is leading the research software community in the crucial step of agreeing how to apply the FAIR principles to research software, including defining the principles and adoption guidelines. This group was convened under the Research Software Alliance (ReSA), the Research Data Alliance (RDA), and FORCE11 (the Future of Research Communication and Escholarship). This paper explains how the community collaboration to enable this has been built, as an example of a model for teamwork across the research software community, and which could potentially be used in other fields and domains as well, as this is an interdisciplinary and global effort},
	language = {eng},
	urldate = {2022-03-09},
	author = {Katz, Daniel S. and Barker, Michelle and Chue Hong, Neil P. and Castro, Leyla Jael and Martinez, Paula Andrea},
	month = jun,
	year = {2021},
	doi = {10.5281/zenodo.5037157},
	note = {Conference Name: 2021 Collegeville Workshop on Scientific Software - Software Teams (Collegeville2021)
Publisher: Zenodo},
	keywords = {research software, FAIR, collaboration, community, FAIR software},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\T9K6XTUJ\\Katz et al. - 2021 - The FAIR4RS team Working together to make researc.pdf:application/pdf},
}

@article{chue_hong_fair_2021,
	title = {{FAIR} {Principles} for {Research} {Software} ({FAIR4RS} {Principles})},
	doi = {10.15497/RDA00068},
	language = {en},
	author = {Chue Hong, Neil P. and Katz, Daniel S and Barker, Michelle and Lamprecht, Anna-Lena and Martinez, Carlos and Psomopoulos, Fotis E and Harrow, Jen and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom and Struck, Alexander and Lee, Allen and Loewe, Axel and van Werkhoven, Ben and Jones, Catherine and Garijo, Daniel and Plomp, Esther and Genova, Francoise and Shanahan, Hugh and Leng, Joanna and Hellström, Maggie and Sinha, Manodeep and Kuzak, Mateusz and Herterich, Patricia and Zhang, Qian and Islam, Sharif and Sansone, Susanna-Assunta and Pollard, Tom and Atmojo, Udayanto Dwi and Williams, Alan and Czerniak, Andreas and Niehues, Anna and Fouilloux, Anne Claire and Desinghu, Bala and Richard, Céline and Gray, Charles and Erdmann, Chris and Nüst, Daniel and Tartarini, Daniele and Anzt, Hartwig and Todorov, Ilian and McNally, James and Moldon, Javier and Burnett, Jessica and Belhajjame, Khalid and Sesink, Laurents and Hwang, Lorraine and Roberto, Marcos and Wilkinson, Mark D and Servillat, Mathieu and Liffers, Matthias and Fox, Merc and Lynch, Nick and Lavanchy, Paula Martinez and Gesing, Sandra and Stevens, Sarah and Cuesta, Martinez and Peroni, Silvio and Soiland-Reyes, Stian and Bakker, Tom and Rabemanantsoa, Tovo and Sochat, Vanessa and Yehudi, Yo},
	year = {2021},
	pages = {32},
	file = {Hong et al. - FAIR Principles for Research Software (FAIR4RS Pri.pdf:C\:\\Users\\beld\\Zotero\\storage\\4TRSLD8M\\Hong et al. - FAIR Principles for Research Software (FAIR4RS Pri.pdf:application/pdf},
}

@article{katz_fresh_2021,
	title = {A {Fresh} {Look} at {FAIR} for {Research} {Software}},
	url = {http://arxiv.org/abs/2101.10883},
	abstract = {This document captures the discussion and deliberation of the FAIR for Research Software (FAIR4RS) subgroup that took a fresh look at the applicability of the FAIR Guiding Principles for scientific data management and stewardship for research software. We discuss the vision of research software as ideally reproducible, open, usable, recognized, sustained and robust, and then review both the characteristic and practiced differences of research software and data. This vision and understanding of initial conditions serves as a backdrop for an attempt at translating and interpreting the guiding principles to more fully align with research software. We have found that many of the principles remained relatively intact as written, as long as considerable interpretation was provided. This was particularly the case for the "Findable" and "Accessible" foundational principles. We found that "Interoperability" and "Reusability" are particularly prone to a broad and sometimes opposing set of interpretations as written. We propose two new principles modeled on existing ones, and provide modified guiding text for these principles to help clarify our final interpretation. A series of gaps in translation were captured during this process, and these remain to be addressed. We finish with a consideration of where these translated principles fall short of the vision laid out in the opening.},
	urldate = {2022-03-09},
	journal = {arXiv:2101.10883 [cs]},
	author = {Katz, Daniel S. and Gruenpeter, Morane and Honeyman, Tom and Hwang, Lorraine and Wilkinson, Mark D. and Sochat, Vanessa and Anzt, Hartwig and Goble, Carole and 1, for FAIR4RS Subgroup},
	month = feb,
	year = {2021},
	note = {arXiv: 2101.10883},
	keywords = {Computer Science - Software Engineering},
	file = {arXiv Fulltext PDF:C\:\\Users\\beld\\Zotero\\storage\\VMQPKLNF\\Katz et al. - 2021 - A Fresh Look at FAIR for Research Software.pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\beld\\Zotero\\storage\\PYKYY79J\\2101.html:text/html},
}

@article{katz_taking_2021,
	title = {Taking a fresh look at {FAIR} for research software},
	volume = {2},
	issn = {2666-3899},
	url = {https://www.sciencedirect.com/science/article/pii/S2666389921000362},
	doi = {10.1016/j.patter.2021.100222},
	abstract = {Software is increasingly essential in most research, and much of this software is developed specifically for and during research. To make this research software findable, accessible, interoperable, and reusable (FAIR), we need to define exactly what FAIR means for research software and acknowledge that software is a living and complex object for which it is impossible to propose one solution that fits all software.},
	language = {en},
	number = {3},
	urldate = {2022-03-09},
	journal = {Patterns},
	author = {Katz, Daniel S. and Gruenpeter, Morane and Honeyman, Tom},
	month = mar,
	year = {2021},
	pages = {100222},
	file = {Full Text:C\:\\Users\\beld\\Zotero\\storage\\5B9LLYR7\\Katz et al. - 2021 - Taking a fresh look at FAIR for research software.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\beld\\Zotero\\storage\\78MTIHQX\\S2666389921000362.html:text/html},
}

@article{lamprecht_towards_2020,
	title = {Towards {FAIR} principles for research software},
	volume = {3},
	issn = {24518492, 24518484},
	url = {https://www.medra.org/servlet/aliasResolver?alias=iospress&doi=10.3233/DS-190026},
	doi = {10.3233/DS-190026},
	abstract = {The FAIR Guiding Principles, published in 2016, aim to improve the ﬁndability, accessibility, interoperability and reusability of digital research objects for both humans and machines. Until now the FAIR principles have been mostly applied to research data. The ideas behind these principles are, however, also directly relevant to research software. Hence there is a distinct need to explore how the FAIR principles can be applied to software. In this work, we aim to summarize the current status of the debate around FAIR and software, as basis for the development of community-agreed principles for FAIR research software in the future. We discuss what makes software different from data with regard to the application of the FAIR principles, and which desired characteristics of research software go beyond FAIR. Then we present an analysis of where the existing principles can directly be applied to software, where they need to be adapted or reinterpreted, and where the deﬁnition of additional principles is required. Here interoperability has proven to be the most challenging principle, calling for particular attention in future discussions. Finally, we outline next steps on the way towards deﬁnite FAIR principles for research software.},
	language = {en},
	number = {1},
	urldate = {2022-03-09},
	journal = {Data Science},
	author = {Lamprecht, Anna-Lena and Garcia, Leyla and Kuzak, Mateusz and Martinez, Carlos and Arcila, Ricardo and Martin Del Pico, Eva and Dominguez Del Angel, Victoria and van de Sandt, Stephanie and Ison, Jon and Martinez, Paula Andrea and McQuilton, Peter and Valencia, Alfonso and Harrow, Jennifer and Psomopoulos, Fotis and Gelpi, Josep Ll. and Chue Hong, Neil and Goble, Carole and Capella-Gutierrez, Salvador},
	editor = {Groth, Paul and Groth, Paul and Dumontier, Michel},
	month = jun,
	year = {2020},
	pages = {37--59},
	file = {Lamprecht et al. - 2020 - Towards FAIR principles for research software.pdf:C\:\\Users\\beld\\Zotero\\storage\\ZHTGDEKQ\\Lamprecht et al. - 2020 - Towards FAIR principles for research software.pdf:application/pdf},
}

@article{noauthor_ieee_1990,
	title = {{IEEE} {Standard} {Glossary} of {Software} {Engineering} {Terminology}},
	doi = {10.1109/IEEESTD.1990.101064},
	abstract = {This IEEE Standards product is part of the family on Software Engineering. This standard identifies terms currently in use in the field of Software Engineering. Standard definitions for those terms are established.},
	journal = {IEEE Std 610.12-1990},
	month = dec,
	year = {1990},
	note = {Conference Name: IEEE Std 610.12-1990},
	keywords = {Software engineering, Standards, Definitions, dictionary, glossary, terminology, Terminology},
	pages = {1--84},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\6DE5NWTI\\159342.html:text/html},
}

@article{heiler_semantic_1995,
	title = {Semantic interoperability},
	volume = {27},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/210376.210392},
	doi = {10.1145/210376.210392},
	number = {2},
	urldate = {2022-04-08},
	journal = {ACM Computing Surveys},
	author = {Heiler, Sandra},
	month = jun,
	year = {1995},
	pages = {271--273},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\L3F8MCKR\\Heiler - 1995 - Semantic interoperability.pdf:application/pdf},
}

@article{benureau_re-run_2018,
	title = {Re-run, {Repeat}, {Reproduce}, {Reuse}, {Replicate}: {Transforming} {Code} into {Scientific} {Contributions}},
	volume = {11},
	issn = {1662-5196},
	shorttitle = {Re-run, {Repeat}, {Reproduce}, {Reuse}, {Replicate}},
	url = {https://www.frontiersin.org/article/10.3389/fninf.2017.00069},
	abstract = {Scientific code is different from production software. Scientific code, by producing results that are then analyzed and interpreted, participates in the elaboration of scientific conclusions. This imposes specific constraints on the code that are often overlooked in practice. We articulate, with a small example, five characteristics that a scientific code in computational science should possess: re-runnable, repeatable, reproducible, reusable, and replicable. The code should be executable (re-runnable) and produce the same result more than once (repeatable); it should allow an investigator to reobtain the published results (reproducible) while being easy to use, understand and modify (reusable), and it should act as an available reference for any ambiguity in the algorithmic descriptions of the article (replicable).},
	urldate = {2022-04-10},
	journal = {Frontiers in Neuroinformatics},
	author = {Benureau, Fabien C. Y. and Rougier, Nicolas P.},
	year = {2018},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\X75HMM7G\\Benureau and Rougier - 2018 - Re-run, Repeat, Reproduce, Reuse, Replicate Trans.pdf:application/pdf},
}

@misc{verburg_recognising_2022,
	title = {Recognising and implementing {FAIR} throughout the organisation},
	url = {https://zenodo.org/record/6413951},
	abstract = {For an organisation to successfully implement a programme for open and FAIR science, it is vital that its approach is one that both connects to all relevant actors throughout the organisation and is also supported by senior management. Utrecht University showcases an extensive Open Science Programme that includes support for FAIR practices. This programme is carried out through collaborations with many different parties and stakeholders to ensure alignment throughout the organisation and a focus on the aspects that are most relevant to academics. Awareness, training, and recognition are the main pillars of this programme. Based on the TRIPLE model, Utrecht University strives to remain at the forefront of the open science movement in the Netherlands. This story depicts the organisation’s programme and gives examples of the resulting practical implementations of training and recognition efforts.},
	urldate = {2022-04-12},
	author = {Verburg, Maaike and Grootveld, Marjan},
	month = feb,
	year = {2022},
	doi = {10.5281/zenodo.6413951},
	keywords = {FAIR principles, Data support model, FAIR training and skills, Research data management},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\JC57Q54W\\Verburg and Grootveld - 2022 - Recognising and implementing FAIR throughout the o.pdf:application/pdf},
}

@techreport{gruenpeter_defining_2021,
	title = {Defining {Research} {Software}: a controversial discussion},
	shorttitle = {Defining {Research} {Software}},
	url = {https://zenodo.org/record/5504016},
	abstract = {Software is essential in modern research; it plays vital roles at multiple stages of the research lifecycle. The term Research Software is widely used in the academic community but, what do we mean when we use these terms? Software and research? When you think of software, you may think of a digital object that is executed on a machine. Yet software is more than just this, it is a complex and evolving artifact. It may be a concept or a project designed to solve a puzzle by a team or a community that develops its functionalities and algorithms, which might not be digital objects. Furthermore, the software artifacts are digital objects, e.g., executables and source code files for different environments. These digital artifacts, which are used in a scholarly setting, might be important in the research process, but should all these be considered Research Software? This report is the result of a discussion examining the scope of the community definition of the FAIR principles for Research Software as part of the work in the FAIR for Research Software working group (FAIR4RS). We aim to clarify the scope of the FAIR principles by identifying which software artifacts the FAIR principles should apply to. This discussion portrayed a complex landscape of software uses in research and existing definitions that can help to better understand the complexity of different types of software in academia. Finally we determine the scope of the FAIR4RS with a short and concise definition of Research Software as a separate metaphor of software in research.},
	urldate = {2022-04-12},
	institution = {Zenodo},
	author = {Gruenpeter, Morane and Katz, Daniel S. and Lamprecht, Anna-Lena and Honeyman, Tom and Garijo, Daniel and Struck, Alexander and Niehues, Anna and Martinez, Paula Andrea and Castro, Leyla Jael and Rabemanantsoa, Tovo and Chue Hong, Neil P. and Martinez-Ortiz, Carlos and Sesink, Laurents and Liffers, Matthias and Fouilloux, Anne Claire and Erdmann, Chris and Peroni, Silvio and Martinez Lavanchy, Paula and Todorov, Ilian and Sinha, Manodeep},
	month = sep,
	year = {2021},
	doi = {10.5281/zenodo.5504016},
	keywords = {research software, scientific software, FAIR principles, academic software, definition, software source code},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\MNICPT74\\Gruenpeter et al. - 2021 - Defining Research Software a controversial discus.pdf:application/pdf},
}

@article{chue_hong_fair_2022,
	title = {{FAIR} {Principles} for {Research} {Software} ({FAIR4RS} {Principles})},
	copyright = {Creative Commons Attribution 4.0 International},
	url = {https://rd-alliance.org/group/fair-research-software-fair4rs-wg/outcomes/fair-principles-research-software-fair4rs-0},
	doi = {10.15497/RDA00068},
	abstract = {Research software is a fundamental and vital part of research worldwide, yet there remain significant challenges to software productivity, quality, reproducibility, and sustainability. Improving the practice of scholarship is a common goal of the open science, open source software and FAIR (Findable, Accessible, Interoperable and Reusable) communities, but improving the sharing of research software has not yet been a strong focus of the latter. To improve the FAIRness of research software, the FAIR for Research Software (FAIR4RS) Working Group has sought to understand how to apply the FAIR Guiding Principles for scientific data management and stewardship to research software, bringing together existing and new community efforts. Many of the FAIR Guiding Principles can be directly applied to research software by treating software and data as similar digital research objects. However, specific characteristics of software — such as its executability, composite nature, and continuous evolution and versioning — make it necessary to revise and extend the principles. This document presents the first version of the FAIR Principles for Research Software (FAIR4RS Principles). It is an outcome of the FAIR for Research Software Working Group (FAIR4RS WG). The FAIR for Research Software Working Group is jointly convened as an RDA Working Group, FORCE11 Working Group, and Research Software Alliance (ReSA) Task Force.},
	language = {en},
	urldate = {2022-04-12},
	author = {Chue Hong, Neil P. and Katz, Daniel S. and Barker, Michelle and Lamprecht, Anna-Lena and Martinez, Carlos and Psomopoulos, Fotis E. and Harrow, Jen and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom},
	collaborator = {Struck, Alexander and Lee, Allen and Loewe, Axel and Van Werkhoven, Ben and Jones, Catherine and Garijo, Daniel and Plomp, Esther and Genova, Francoise and Shanahan, Hugh and Leng, Joanna and Hellstrm, Maggie and Sandström, Malin and Sinha, Manodeep and Kuzak, Mateusz and Herterich, Patricia and Zhang, Qian and Islam, Sharif and Sansone, Susanna-Assunta and Pollard, Tom and Atmojo, Udayanto Dwi and Williams, Alan and Czerniak, Andreas and Nihues, Anna and Fouilloux, Anne Claire and Desinghu, Bala and Goble, Carole and Richard, Céline and Gray, Charles and Erdmann, Chris and Nüst, Daniel and Tartarini, Daniele and Ranguelova, Elena and Anzt, Hartwig and Todorov, Ilian and McNally, James and Moldon, Javier and Burnett, Jessica and Garrido-Sánchez, Julián and Belhajjame, Khalid and Sesink, Laurents and Hwang, Lorraine and Tovani-Palone, Marcos Roberto and Wilkinson, Mark D. and Servillat, Mathieu and Liffers, Matthias and Fox, Merc and Miljković, Nadica and Lynch, Nick and Lavanchy, Paula Martinez and Gesing, Sandra and Stevens, Sarah and Cuesta, Sergio Martinez and Peroni, Silvio and Soiland-Reyes, Stian and Bakker, Tom and Rabemanantsoa, Tovo and Sochat, Vanessa and Yehudi, Yo and Research Data Alliance FAIR For Research Software (FAIR4RS) WG},
	month = mar,
	year = {2022},
	note = {Publisher: Research Data Alliance},
	file = {Chue Hong et al. - 2021 - FAIR Principles for Research Software (FAIR4RS Pri.pdf:C\:\\Users\\beld\\Zotero\\storage\\AYHA7FXC\\Chue Hong et al. - 2021 - FAIR Principles for Research Software (FAIR4RS Pri.pdf:application/pdf},
}

@article{katz_fair4rs_2021-1,
	title = {{FAIR4RS} {WG} subgroup community consultation {March} 2021},
	url = {https://zenodo.org/record/4635410},
	abstract = {This document is the result of the four subgroups of the FAIR for Research Software working group, which is working under the Research Data Alliance, the Research Software Alliance, and FORCE11. These subgroups independently examined the FAIR principles in relation to software. FAIR4RS-subgroup1 started with the original FAIR principles (Wilkinson et al. 2016) and worked to 1. determine what part of the original FAIR principles apply as is to research software; 2. determine what part of the original FAIR principles doesn't apply at all to research software; and 3. determine what part of the original FAIR principles applies to research software, but with a different definition or  different details, starting with the original FAIR principles themselves, and not relying on work done by others to  apply them to research software, such as by Lamprecht et al. (2020). This led to (the preprint Katz et al. 2021 and the opinion paper Katz et al. 2021) that includes: ● a discussion of the differences between software and data, ● an initial straightforward translation that was collected from the FAIR4RS-subgroup1 participants; ● a discussion about the nuances of the currently defined rules in the context of research software; ● a proposed set of principles adapted to the FAIR research software case; ● a comparison of those proposed principles with the FAIR data principles; ● a set of gaps in our current infrastructure and existing practices that make implementing the proposed principles difficult; and ● a discussion of where the proposed principles fall short of a larger world of fully-open, high-quality, sustainable software developed and maintained by recognized and rewarded people in the context of full-reproducible research. We refer to these proposed principles as FAIR4RS-subgroup1. FAIR4RS-subgroup2 looked at the work of FAIR4RS-subgroup1 and provided feedback and comments related to other digital objects that FAIR4RS-subgroup1 did not consider, such as training materials and workflows, to understand how general the FAIR4RS-subgroup1 work was. We refer to this work as FAIR4RS-subgroup2. FAIR4RS-subgroup3 examined the complexity of defining research software, by gathering definitions of research software and related terms in the literature, and by compiling examples and discussing whether they exemplify research software This was then followed by two workshops with the intention of clarifying the scope of the FAIR  principles by identifying for which software artifacts the FAIR principles should be applied. The concept of exclusive  and inclusive definitions regarding the usage of the term “Research” were further discussed, as well as further discussion around a small number of examples of research software. This discussion and the preceding compilation work were synthesised as a report portraying a complex landscape of software uses and software examples in research. Furthermore, an analysis of existing definitions resulted in a better understanding of the complexity of types of software and types of roles software has during the research process. The subgroup identified an important controversy in academia, which is by itself a step forward for the FAIR software roadmap. FAIR4RS-subgroup4 started with the rewritten FAIR principles for research software (Lamprecht et al. 2020) and worked to: ● identify other work (FAIR4RS WG, 2020) that helped to inform the application of FAIR principles to research software, and examples of software that helped to understand the characteristics of FAIR software; ● discuss and agree how the spirit of the FAIR foundational principles could be interpreted and applied to research software; ● determine which of the rewritten FAIR principles in Lamprecht et al. 2020 applied as written, applied if rewritten, or did not make sense to apply to research software; and ● suggest where further discussion is needed to rewrite, add or delete FAIR guiding principles for research software. This was undertaken using a survey that sought feedback and reflection on the rewritten FAIR principles in Lamprecht et al. 2020. A reading list of other work was compiled which identified potential blindspots, including a lack of attention to relevant work from domains outside of life sciences and physical sciences. The responses to the survey were synthesised to produce a reinterpretation of the FAIR foundational principles for software, as well as identifying common themes and specific criticisms of the Lamprecht et al.2020 proposed guiding principles for  research software. We refer to this work as FAIR4RS-subgroup4. We additionally consider two other documents/groups that have worked in this space. First, the principles proposed by Lamprecht et al. 2020 in “Towards FAIR principles for research software” which we refer to in the remainder of the report as Lamprecht, and second, the recommendations in "5 recommendations for FAIR software," which we refer to as 5RECS. Then, we compare the different recommendations, ask specific questions, and discuss possible options. We also show two figures that attempt to explain the different aspects of FAIR for Research Software. This document’s main goal and this community consultation period is to get community feedback on these options and the figures. After this comparison, discussion of options, figures, and references, a detailed table of the recommendations appears as an appendix.   Files included in this deposit: File 1 .docx with all the comments File 2 .pdf with all the comments File 3 .pdf wording suggestions accepted all other comments deleted This deposit is not a final outcome. It is work in progress.},
	urldate = {2022-04-12},
	author = {Katz, Daniel S. and Chue Hong, Neil P. and Barker, Michelle and Gruenpeter, Morane},
	month = mar,
	year = {2021},
	doi = {10.5281/zenodo.4635410},
	note = {Publisher: Zenodo},
	keywords = {research software, software, FAIR, Accesible, Community consultation, FAIR4RS, Findable, Interoperable, Reusable},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\LGJWE8C9\\Katz et al. - 2021 - FAIR4RS WG subgroup community consultation March 2.pdf:application/pdf},
}

@techreport{schlauch_dlr_2018,
	title = {{DLR} {Software} {Engineering} {Guidelines}},
	url = {https://zenodo.org/record/1344612},
	abstract = {This document describes the software engineering guidelines of the German Aerospace Center (DLR). The target group of the guidelines are DLR scientists. The guidelines shall support them to find out the status of their developed software and to improve it with regard to good software development and documentation practice. The focus of the guidelines is on retaining knowledge and supporting sustainable software development in research. We publish these guidelines to support the general discussion about good software development practice in research.},
	language = {eng},
	urldate = {2022-04-16},
	institution = {Zenodo},
	author = {Schlauch, Tobias and Meinel, Michael and Haupt, Carina},
	month = aug,
	year = {2018},
	doi = {10.5281/zenodo.1344612},
	keywords = {guidelines, research-software-engineering},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\HJ9XB7S4\\Schlauch et al. - 2018 - DLR Software Engineering Guidelines.pdf:application/pdf},
}

@book{directorate-general_for_research_and_innovation_european_commission_six_2020,
	address = {LU},
	title = {Six {Recommendations} for implementation of {FAIR} practice by the {FAIR} in practice task force of the {European} open science cloud {FAIR} working group},
	isbn = {978-92-76-22779-3},
	url = {https://data.europa.eu/doi/10.2777/986252},
	abstract = {This report analyses the state of FAIR practices within diverse research communities and FAIR-related policies in different countries and offers six practical recommendations on how FAIR can be turned into practice. These recommendations are aimed primarily at decision making entities of the European Open Science Cloud (EOSC), as well as research funders: 1. Fund awareness-raising, training, education and community-specific support. 2. Fund development, adoption and maintenance of community standards, tools and infrastructure. 3. Incentivise development of community governance. 4. Translate FAIR guidelines for other digital objects. 5. Reward and recognise improvements of FAIR practice. 6. Develop and monitor adequate policies for FAIR data and research objects. In order to ensure widespread benefits of the EOSC, improvements in FAIR practices are necessary. We believe that the timing of this report, which coincides with the fully-fledged launch of the EOSC, could help the EOSC, research funders and policymakers make crucial strategic decisions about investment needed to put FAIR principles into practice.},
	language = {eng},
	urldate = {2022-04-24},
	publisher = {Publications Office of the European Union},
	author = {Directorate-General for Research {and} Innovation (European Commission) and EOSC Executive Board},
	year = {2020},
}

@article{gruenpeter_m215_2020,
	title = {M2.15 {Assessment} report on '{FAIRness} of software'},
	url = {https://zenodo.org/record/4095092},
	abstract = {Software has an important place in academia and as such it has an important place in the FAIR ecosystem. Software can be used throughout the research process; however it can also be an outcome of the research process. Distinguishing between these different roles is essential for any assessment of the `FAIRness of software’. This is the first milestone of the FAIRsFAIR project focused specifically on software as a digital object. In this report we discuss the state-of-the-art of software in the scholarly ecosystem in general and in the FAIR literature in particular. We identify the challenges of different stakeholders when it comes to finding and reusing software. Furthermore, we present an analysis of nine resources that call for the recognition of software in academia and that present guidelines or recommendations to improve its status - either by becoming more FAIR or by improving the curation of software in general. With this analysis we demonstrate to what extent each of the FAIR principles is seen as relevant, achievable and measurable; and in what sense it benefits software artifacts. Finally, we present 10 high-level recommendations for organizations that seek to define FAIR principles or other requirements for research software in the scholarly domain.   Feedback and suggestions will be most welcome as comments on the public Google Doc version of this report https://docs.google.com/document/d/1yvdLSP6oH3XozVy4CJtThzGNHkseCBdvmxfruDYLB6Q/edit?usp=sharing},
	urldate = {2022-04-24},
	author = {Gruenpeter, Morane and Di Cosmo, Roberto and Koers, Hylke and Herterich, Patricia and Hooft, Rob and Parland-von Essen, Jessica and Tana, Jonas and Aalto, Tero and Jones, Sarah},
	month = oct,
	year = {2020},
	doi = {10.5281/zenodo.4095092},
	note = {Publisher: Zenodo},
	keywords = {FAIR, EOSC, FAIR Software, Software guidelines, Software in academia},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\QGLSZ7HQ\\Gruenpeter et al. - 2020 - M2.15 Assessment report on 'FAIRness of software'.pdf:application/pdf},
}

@misc{noauthor_six_nodate,
	title = {Six {Recommendations} for implementation of {FAIR} practice by the {FAIR} in practice task force of the {European} open science cloud {FAIR} working group - {Publications} {Office} of the {EU}},
	url = {https://op.europa.eu/en/publication-detail/-/publication/4630fa57-1348-11eb-9a54-01aa75ed71a1/language-en},
	note = {(accessed 2022-04-24)},
	file = {Six Recommendations for implementation of FAIR practice by the FAIR in practice task force of the European open science cloud FAIR working group - Publications Office of the EU:C\:\\Users\\beld\\Zotero\\storage\\52CD2YBT\\language-en.html:text/html},
}

@article{woodley_cscce_2020,
	title = {The {CSCCE} {Community} {Participation} {Model} – {A} framework to describe member engagement and information flow in {STEM} communities},
	url = {https://zenodo.org/record/3997802},
	abstract = {The CSCCE Community Participation Model describes four modes of member engagement that can occur within a community – CONVEY/CONSUME, CONTRIBUTE, COLLABORATE, and CO-CREATE - and one that can occur outside of it: CHAMPION. This guidebook is intended to help you use the model to inform your community member engagement strategy by answering a series of FAQs.  About CSCCE The Center for Scientific Collaboration and Community Engagement (CSCCE) champions the importance of human infrastructure for effective collaboration in STEM. We provide training and support for the people who make scientific collaborations succeed at scale - and we also research the impact of these emerging roles. Find out more about us on our website: cscce.org},
	urldate = {2022-04-24},
	author = {Woodley, Lou and Pratt, Katie},
	month = aug,
	year = {2020},
	doi = {10.5281/zenodo.3997802},
	note = {Publisher: Zenodo},
	keywords = {CSCCE, CSCCE Community Participation Model},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\AAB7W89U\\Woodley and Pratt - 2020 - The CSCCE Community Participation Model – A framew.pdf:application/pdf},
}

@article{research_data_allianceforce11_software_source_code_identification_wg_software_2020,
	title = {Software {Source} {Code} {Identification} {Use} cases and identifier schemes for persistent software source code identification},
	url = {https://zenodo.org/record/4312464},
	abstract = {Software, and in particular source code, plays an important role in science: it is used in all research fields to produce, transform and analyse research data, and is sometimes itself an object of research and/or an output of research. This output, with inputs from a broad panel of stakeholders, provides an overview of the current state-of-the-art practice in software identification, including use cases and identifier schemes from different academic domains and in industry.},
	urldate = {2022-04-26},
	author = {Research Data Alliance/FORCE11 Software Source Code Identification WG and Allen, Alice and Bandrowski, Anita and Chan, Peter and di Cosmo, Roberto and Fenner, Martin and Garcia, Leyla and Gruenpeter, Morane and Jones, Catherine M. and Katz, Daniel S. and Kunze, John and Schubotz, Moritz and Todorov, Ilian T.},
	month = oct,
	year = {2020},
	doi = {10.15497/RDA00053},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\SENHHPQ3\\WG et al. - 2020 - Software Source Code Identification Use cases and .pdf:application/pdf},
}

@misc{erdmann_top_2019,
	title = {Top 10 {FAIR} {Data} \& {Software} {Things}},
	url = {https://zenodo.org/record/2555498},
	abstract = {The Top 10 FAIR Data \& Software Global Sprint was held online over the course of two-days (29-30 November 2018), where participants from around the world were invited to develop brief guides (stand alone, self paced training materials), called "Things", that can be used by the research community to understand FAIR in different contexts but also as starting points for conversations around FAIR. The idea for "Top 10 Data Things" stems from initial work done at the Australian Research Data Commons or ARDC (formerly known as the Australian National Data Service). The Global Sprint was organised by Library Carpentry, Australian Research Data Commons and the Research Data Alliance Libraries for Research Data Interest Group in collaboration with FOSTER Open Science, OpenAire, RDA Europe, Data Management Training Clearinghouse, California Digital Library, Dryad, AARNet, Center for Digital Scholarship at the Leiden University, and DANS. Anyone could join the Sprint and roughly 25 groups/individuals participated from The Netherlands, Germany, Australia, United States, Hungary, Norway, Italy, and Belgium. See the full list of registered Sprinters. Sprinters worked off of a primer that was provided in advance together with an online ARDC webinar introducing FAIR and the Sprint titled, "Ready, Set, Go! Join the Top 10 FAIR Data Things Global Sprint." Groups/individuals developed their Things in Google docs which could be accessed and edited by all participants. The Sprinters also used a Zoom channel provided by ARDC, for online calls and coordination, and a Gitter channel, provided by Library Carpentry, to chat with each other throughout the two-days. In addition, participants used the Twitter hashtag \#Top10FAIR to communicate with the broader community, sometimes including images of the day. Participants greeted each other throughout the Sprint and created an overall welcoming environment. As the Sprint shifted to different timezones, it was a chance for participants to catch up. The Zoom and Gitter channels were a way for many to connect over FAIR but also discuss other topics. A number of participants did not know what to expect from a Library Carpentry/Carpentries-like event but found a welcoming environment where everyone could participate. The Top 10 FAIR Data \& Software Things repository and website hosts the work of the Sprinters and is meant to be an evolving resource. Members of the wider community can submit issues and/or pull requests to the Things to help improve them. In addition, a published version of the Things will be made available via Zenodo and the Data Management Training Clearinghouse in February 2019.},
	language = {eng},
	urldate = {2022-04-27},
	author = {Erdmann, Christopher and Simons, Natasha and Otsuji, Reid and Labou, Stephanie and Johnson, Ryan and Castelao, Guilherme and Boas, Bia Villas and Lamprecht, Anna-Lena and Ortiz, Carlos Martinez and Garcia, Leyla and Kuzak, Mateusz and Martinez, Paula Andrea and Stokes, Liz and Honeyman, Tom and Wise, Sharyn and Quan, Josh and Peterson, Scott and Neeser, Amy and Karvovskaya, Lena and Lange, Otto and Witkowska, Iza and Flores, Jacques and Bradley, Fiona and Hettne, Kristina and Verhaar, Peter and Companjen, Ben and Sesink, Laurents and Schoots, Fieke and Schultes, Erik and Kaliyaperumal, Rajaram and Tóth-Czifra, Erzsébet and Azevedo, Ricardo de Miranda and Muurling, Sanne and Brown, John and Chan, Janice and Quigley, Niamh and Federer, Lisa and Joubert, Douglas and Dillman, Allissa and Wilkins, Kenneth and Chandramouliswaran, Ishwar and Navale, Vivek and Wright, Susan and Giorgio, Silvia Di and Fasemore, Mandela and Förstner, Konrad and Sauerwein, Till and Seidlmayer, Eva and Zeitlin, Ilja and Bacon, Susannah and Hannan, Katie and Ferrers, Richard and Russell, Keith and Whitmore, Deidre and Dennis, Tim},
	month = feb,
	year = {2019},
	doi = {10.5281/zenodo.2555498},
	keywords = {FAIR},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\T8TPCR2K\\Erdmann et al. - 2019 - Top 10 FAIR Data & Software Things.pdf:application/pdf},
}
@software{Spaaks_howfairis,
author = {Spaaks, Jurriaan H. and Kuzak, Mateusz and Martinez-Ortiz, Carlos and van Werkhoven, Ben and Etuk, Edidiong and Saladi, Shyam and Holding, Andrew and Tjong Kim Sang, Erik and Diblen, Faruk and Verhoeven, Stefan},
license = {Apache-2.0},
title = {{howfairis}},
url = {https://github.com/fair-software/howfairis},
version = {0.14.1}
}

@misc{noauthor_software_nodate,
	title = {Software {Management} {Plans}},
	url = {https://www.software.ac.uk/software-management-plans},
	abstract = {Why write a Software Management Plan? Research software can take many guises. It can be a 50 line bash shell script for manipulating and filtering files, a collection of 100 line R scripts for running a bioinformatics analysis, 10,000 lines of Java for medical image analysis or 100,000 lines of Fortran for computational fluid dynamics. It may be written in scripting languages such as Unix shell, Python, R or MATLAB or in "traditional" programming languages such as C, C++, Fortran or Java.},
	language = {en},
	note = {(accessed 2022-05-19)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\X5Z8B7ZB\\software-management-plans.html:text/html},
}


@misc{noauthor_fair_nodate,
	title = {{FAIR} {Research} {Software}},
	url = {https://fair-software.nl/home},
	abstract = {Five recommendations for FAIR software},
	note = {(accessed 2022-04-27)},
	journal = {FAIR Research Software},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\35UQZ4PP\\fair-software.nl.html:text/html},
}

@misc{noauthor_codemeta_2021,
	title = {Codemeta {Generator}},
	copyright = {AGPL-3.0},
	url = {https://github.com/codemeta/codemeta-generator},
	abstract = {This repository contains a (client-side) web application to generate Codemeta documents (aka. codemeta.json).},
	note = {(accessed 2022-04-27)},
	publisher = {CodeMeta},
	month = may,
	year = {2021},
}

@misc{kuzak_fair4rs_nodate,
	title = {{FAIR4RS} subgroup 2 - summary report},
	url = {https://docs.google.com/document/d/1zPjeJgVKg4q1nEYTxRJIas2w3MYYlUVOnjUtJRLp7QI/edit?usp=embed_facebook},
	abstract = {FAIR work in other contexts - summary report By Mateusz Kuzak, Michelle Barker, Robin Richardson, Jessica Burnett, Carole Goble, Leyla Garcia Completed: late 2020 Introduction The FAIR4RS subgroup aimed to analyse commonalities and differences in how FAIR principles are applied to research object...},
	language = {en-GB},
	note = {(accessed 2022-05-03)},
	journal = {Google Docs},
	author = {Kuzak, Mateusz and Barker, Michelle and Richardson, Robin and Burnett, Jessica and Goble, Carole and Garcia, Leyla},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\KTILS99V\\edit.html:text/html},
}

@article{wilkinson_fair_2016,
	title = {The {FAIR} {Guiding} {Principles} for scientific data management and stewardship},
	volume = {3},
	copyright = {2016 The Author(s)},
	issn = {2052-4463},
	url = {http://www.nature.com/articles/sdata201618},
	doi = {10.1038/sdata.2016.18},
	abstract = {There is an urgent need to improve the infrastructure supporting the reuse of scholarly data. A diverse set of stakeholders—representing academia, industry, funding agencies, and scholarly publishers—have come together to design and jointly endorse a concise and measureable set of principles that we refer to as the FAIR Data Principles. The intent is that these may act as a guideline for those wishing to enhance the reusability of their data holdings. Distinct from peer initiatives that focus on the human scholar, the FAIR Principles put specific emphasis on enhancing the ability of machines to automatically find and use the data, in addition to supporting its reuse by individuals. This Comment is the first formal publication of the FAIR Principles, and includes the rationale behind them, and some exemplar implementations in the community.},
	language = {en},
	number = {1},
	urldate = {2022-05-11},
	journal = {Scientific Data},
	author = {Wilkinson, Mark D. and Dumontier, Michel and Aalbersberg, IJsbrand Jan and Appleton, Gabrielle and Axton, Myles and Baak, Arie and Blomberg, Niklas and Boiten, Jan-Willem and da Silva Santos, Luiz Bonino and Bourne, Philip E. and Bouwman, Jildau and Brookes, Anthony J. and Clark, Tim and Crosas, Mercè and Dillo, Ingrid and Dumon, Olivier and Edmunds, Scott and Evelo, Chris T. and Finkers, Richard and Gonzalez-Beltran, Alejandra and Gray, Alasdair J. G. and Groth, Paul and Goble, Carole and Grethe, Jeffrey S. and Heringa, Jaap and ’t Hoen, Peter A. C. and Hooft, Rob and Kuhn, Tobias and Kok, Ruben and Kok, Joost and Lusher, Scott J. and Martone, Maryann E. and Mons, Albert and Packer, Abel L. and Persson, Bengt and Rocca-Serra, Philippe and Roos, Marco and van Schaik, Rene and Sansone, Susanna-Assunta and Schultes, Erik and Sengstag, Thierry and Slater, Ted and Strawn, George and Swertz, Morris A. and Thompson, Mark and van der Lei, Johan and van Mulligen, Erik and Velterop, Jan and Waagmeester, Andra and Wittenburg, Peter and Wolstencroft, Katherine and Zhao, Jun and Mons, Barend},
	month = mar,
	year = {2016},
	note = {Number: 1
Publisher: Nature Publishing Group},
	keywords = {Research data, Publication characteristics},
	pages = {160018},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\6QBMLUND\\Wilkinson et al. - 2016 - The FAIR Guiding Principles for scientific data ma.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\VD4UQEDH\\sdata201618.html:text/html},
}

@techreport{chue_hong_what_2021,
	title = {What makes software {FAIR}? {Reviewing} the {Towards} {FAIR} {Principles} for {Research} {Software} paper and new research related to {FAIR} software: {A} report from {FAIR4RS} {Subgroup} 4},
	shorttitle = {What makes software {FAIR}?},
	url = {https://zenodo.org/record/4908919},
	abstract = {This report summarises the work of the FAIR for Research Software Subgroup 4, which was tasked with reviewing the Towards FAIR Principles for Research Software paper and identifying new research that had been published after that paper was written. A survey was circulated to the subgroup, as well as further afield, that asked some general questions around FAIR for research software along with specific questions about the suitability of the principles presented in the Towards FAIR Principles for Research Software. This report summarises and analyses the results of the survey. This draft report is still subject to revision.},
	urldate = {2022-05-13},
	institution = {Zenodo},
	author = {Chue Hong, Neil Philippe},
	month = jun,
	year = {2021},
	doi = {10.5281/zenodo.4908919},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\PXKIA5N4\\Chue Hong - 2021 - What makes software FAIR Reviewing the Towards FA.pdf:application/pdf},
}

@misc{wg_fair4rs_2021,
	title = {{FAIR4RS} {Subgroup} 4 - reading list of new research},
	url = {https://zenodo.org/record/4555865},
	abstract = {This is a list of twenty-five suggestions of research relevant to understanding how to apply the FAIR principles for software. These should be read in conjunction with the list of references presented in the paper Towards FAIR Principles for Research Software. This list includes research published after Towards FAIR Principles for Research Software, or address gaps from disciplines missed in the paper. The suggestions were collected as part of a survey to understand what makes software FAIR / un-FAIR, as well as understanding how the FAIR principles for software should be defined. This work is part of Subroup 4 of the RDA/ReSA/FORCE11 FAIR for Research Software (FAIR4RS) Working Group. Thanks go to everyone who contributed suggestions.},
	urldate = {2022-05-13},
	publisher = {Zenodo},
	author = {WG, FAIR4RS},
	month = feb,
	year = {2021},
	doi = {10.5281/zenodo.4555865},
	note = {Type: dataset},
	file = {Zenodo Snapshot:C\:\\Users\\beld\\Zotero\\storage\\W4JY2VZS\\4555865.html:text/html},
}



@article{martin_del_pico_automating_2020,
	title = {Automating the monitoring of research software {FAIR} metrics},
	volume = {9},
	url = {https://f1000research.com/posters/9-555},
	doi = {10.7490/f1000research.1117992.1},
	abstract = {Read this work by Martín Del Pico E, at F1000Research.},
	urldate = {2022-05-20},
	journal = {F1000Research},
	author = {Martín Del Pico, Eva and Capella-Gutierrez, Salvador and Gelpi, Josep Lluis},
	month = jun,
	year = {2020},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\47WED7TS\\9-555.html:text/html},
}

@misc{honeyman_subgroup_nodate,
	title = {Subgroup 7: {Governance}},
	shorttitle = {Subgroup 7},
	url = {https://docs.google.com/document/d/1pBBs8hSF8m3WsFRFjJuFHd1sC-jfPV3_0xUTMVzEuMc/edit?usp=embed_facebook},
	abstract = {FAIR4RS Subgroup 7: Governance  Leads: Tom Honeyman, Qian Zhang Group members: Christian Pagé, Francoise Genova, Neil P. Chue Hong, Paula Andrea Martinez, Michelle Barker, Catherine Jones, Leyla Garcia-Castro, Morane Gruenpeter, Carlos Martinez  FAIR4RS WG is forming new subgroups in September 2...},
	language = {en-GB},
	note = {(accessed 2022-05-20)},
	journal = {Google Docs},
	author = {Honeyman, Tom and Zhang, Qian and Pagé, Christian and Genova, Francoise and Chue Hong, Neil P. and Martinez, Paula Andrea and Barker, Michelle and Jones, Catherine and Garcia-Castro, Leyla and Gruenpeter, Morane and Martinez, Carlos},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\U4H5DWS2\\edit.html:text/html},
}

@misc{noauthor_fair4rs_nodate,
	title = {{FAIR4RS} {Roadmap} {Metrics} {WG} charter},
	url = {https://docs.google.com/document/d/1BpzecVx4ZvSNfHD-UHhofZVdA6qiP_ENrmozmiq9zY4/edit?usp=embed_facebook},
	abstract = {FAIR4RS Roadmap Metrics Working Group Charter  Purpose The research sector needs a trusted process to evaluate the openness, accessibility, and reusability of research software. The Working Group aims to develop FAIR research software metrics, based on the community-endorsed Findable, Accessible,...},
	language = {en-GB},
	note = {(accessed 2022-05-20)},
	journal = {Google Docs},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\HVPQ9JHH\\edit.html:text/html},
}


@misc{noauthor_pure_nodate,
	title = {Pure {\textbar} {The} world’s leading {RIMS} or {CRIS} {\textbar} {Elsevier} {Solutions}},
	url = {https://www.elsevier.com/solutions/pure},
	note = {(accessed 2022-05-23)},
	file = {Pure | The world’s leading RIMS or CRIS | Elsevier Solutions:C\:\\Users\\beld\\Zotero\\storage\\JCZ3PJBY\\pure.html:text/html},
}


@misc{noauthor_papers_nodate,
	title = {Papers with {Code} - {The} latest in {Machine} {Learning}},
	url = {https://paperswithcode.com/},
	abstract = {Papers With Code highlights trending Machine Learning research and the code to implement it.},
	language = {en},
	note = {(accessed 2022-05-23)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\TPCK9NQT\\paperswithcode.com.html:text/html},
}

@inproceedings{wohlin_guidelines_2014,
	address = {London, England, United Kingdom},
	title = {Guidelines for snowballing in systematic literature studies and a replication in software engineering},
	isbn = {978-1-4503-2476-2},
	url = {http://dl.acm.org/citation.cfm?doid=2601248.2601268},
	doi = {10.1145/2601248.2601268},
	abstract = {Background: Systematic literature studies have become common in software engineering, and hence it is important to understand how to conduct them efficiently and reliably.
Objective: This paper presents guidelines for conducting literature reviews using a snowballing approach, and they are illustrated and evaluated by replicating a published systematic literature review.
Method: The guidelines are based on the experience from conducting several systematic literature reviews and experimenting with different approaches.
Results: The guidelines for using snowballing as a way to search for relevant literature was successfully applied to a systematic literature review.
Conclusions: It is concluded that using snowballing, as a first search strategy, may very well be a good alternative to the use of database searches.},
	language = {en},
	urldate = {2022-05-24},
	booktitle = {Proceedings of the 18th {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering} - {EASE} '14},
	publisher = {ACM Press},
	author = {Wohlin, Claes},
	year = {2014},
	pages = {1--10},
	file = {Wohlin - 2014 - Guidelines for snowballing in systematic literatur.pdf:C\:\\Users\\beld\\Zotero\\storage\\4YHBRUW6\\Wohlin - 2014 - Guidelines for snowballing in systematic literatur.pdf:application/pdf},
}

@book{tukey_exploratory_1977,
	title = {Exploratory {Data} {Analysis}},
	publisher = {Addison-Wesley},
	author = {Tukey, John W.},
	year = {1977},
	keywords = {eda statistics},
}

@article{cosentino_systematic_2017,
	title = {A {Systematic} {Mapping} {Study} of {Software} {Development} {With} {GitHub}},
	volume = {5},
	issn = {2169-3536},
	doi = {10.1109/ACCESS.2017.2682323},
	abstract = {Context: GitHub, nowadays the most popular social coding platform, has become the reference for mining Open Source repositories, a growing research trend aiming at learning from previous software projects to improve the development of new ones. In the last years, a considerable amount of research papers have been published reporting findings based on data mined from GitHub. As the community continues to deepen in its understanding of software engineering thanks to the analysis performed on this platform, we believe that it is worthwhile to reflect on how research papers have addressed the task of mining GitHub and what findings they have reported. Objective: The main objective of this paper is to identify the quantity, topic, and empirical methods of research works, targeting the analysis of how software development practices are influenced by the use of a distributed social coding platform like GitHub. Method: A systematic mapping study was conducted with four research questions and assessed 80 publications from 2009 to 2016. Results: Most works focused on the interaction around coding-related tasks and project communities. We also identified some concerns about how reliable were these results based on the fact that, overall, papers used small data sets and poor sampling techniques, employed a scarce variety of methodologies and/or were hard to replicate. Conclusions: This paper attested the high activity of research work around the field of Open Source collaboration, especially in the software domain, revealed a set of shortcomings and proposed some actions to mitigate them. We hope that this paper can also create the basis for additional studies on other collaborative activities (like book writing for instance) that are also moving to GitHub.},
	journal = {IEEE Access},
	author = {Cosentino, Valerio and Cánovas Izquierdo, Javier L. and Cabot, Jordi},
	year = {2017},
	note = {Conference Name: IEEE Access},
	keywords = {Collaboration, Conferences, Data mining, GitHub, Libraries, open source software, Software, Software engineering, systematic mapping study, Systematics},
	pages = {7173--7192},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\DNTPHCVB\\7887704.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\CR27J8FJ\\Cosentino et al. - 2017 - A Systematic Mapping Study of Software Development.pdf:application/pdf},
}

@inproceedings{gharehyazie_here_2017,
	title = {Some from {Here}, {Some} from {There}: {Cross}-{Project} {Code} {Reuse} in {GitHub}},
	shorttitle = {Some from {Here}, {Some} from {There}},
	doi = {10.1109/MSR.2017.15},
	abstract = {Code reuse has well-known benefits on code quality, coding efficiency, and maintenance. Open Source Software (OSS) programmers gladly share their own code and they happily reuse others'. Social programming platforms like GitHub have normalized code foraging via their common platforms, enabling code search and reuse across different projects. Removing project borders may facilitate more efficient code foraging, and consequently faster programming. But looking for code across projects takes longer and, once found, may be more challenging to tailor to one's needs. Learning how much code reuse goes on across projects, and identifying emerging patterns in past cross-project search behavior may help future foraging efforts. To understand cross-project code reuse, here we present an in-depth study of cloning in GitHub. Using Deckard, a clone finding tool, we identified copies of code fragments across projects, and investigate their prevalence and characteristics using statistical and network science approaches, and with multiple case studies. By triangulating findings from different methods, we find that cross-project cloning is prevalent in GitHub, ranging from cloning few lines of code to whole project repositories. Some of the projects serve as popular sources of clones, and others seem to contain more clones than their fair share. Moreover, we find that ecosystem cloning follows an onion model: most clones come from the same project, then from projects in the same application domain, and finally from projects in different domains. Our results show directions for new tools that can facilitate code foraging and sharing within GitHub.},
	booktitle = {2017 {IEEE}/{ACM} 14th {International} {Conference} on {Mining} {Software} {Repositories} ({MSR})},
	author = {Gharehyazie, Mohammad and Ray, Baishakhi and Filkov, Vladimir},
	month = may,
	year = {2017},
	keywords = {Cloning, code reuse, cross-project clones, Ecosystems, Encoding, GitHub, Java, Software, Syntactics, Tools},
	pages = {291--301},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\TZTXJ7JL\\7962379.html:text/html},
}

@inproceedings{kalliamvakou_promises_2014,
	address = {Hyderabad, India},
	title = {The promises and perils of mining {GitHub}},
	isbn = {978-1-4503-2863-0},
	url = {http://dl.acm.org/citation.cfm?doid=2597073.2597074},
	doi = {10.1145/2597073.2597074},
	abstract = {With over 10 million git repositories, GitHub is becoming one of the most important source of software artifacts on the Internet. Researchers are starting to mine the information stored in GitHub’s event logs, trying to understand how its users employ the site to collaborate on software. However, so far there have been no studies describing the quality and properties of the data available from GitHub. We document the results of an empirical study aimed at understanding the characteristics of the repositories in GitHub and how users take advantage of GitHub’s main features—namely commits, pull requests, and issues. Our results indicate that, while GitHub is a rich source of data on software development, mining GitHub for research purposes should take various potential perils into consideration. We show, for example, that the majority of the projects are personal and inactive; that GitHub is also being used for free storage and as a Web hosting service; and that almost 40\% of all pull requests do not appear as merged, even though they were. We provide a set of recommendations for software engineering researchers on how to approach the data in GitHub.},
	language = {en},
	urldate = {2022-05-24},
	booktitle = {Proceedings of the 11th {Working} {Conference} on {Mining} {Software} {Repositories} - {MSR} 2014},
	publisher = {ACM Press},
	author = {Kalliamvakou, Eirini and Gousios, Georgios and Blincoe, Kelly and Singer, Leif and German, Daniel M. and Damian, Daniela},
	year = {2014},
	pages = {92--101},
	file = {2597073.pdf:C\:\\Users\\beld\\Zotero\\storage\\5M3MARAA\\2597073.pdf:application/pdf},
}


@misc{katz_research_2020,
	title = {The {Research} {Software} {Alliance} ({ReSA}) and the community landscape},
	url = {https://zenodo.org/record/3699950},
	abstract = {The Research Software Alliance (ReSA)’s mission is to bring research software communities together to collaborate on the advancement of research software. ReSA has formed taskforces and one of them revolves around a software landscape analysis aiming to answer the question "How can we identify the different communities and topics of interest for the research software community (e.g., preservation, RSEs, citation, productivity, sustainability)?" Here we include text describing the work of the taskforce to date (see 2020-03-11-ReSA-landscape.md), as well as plans for the future, and an invitation to readers to contribute to the ReSA list of research software communities. We are a;sp including the current version of the list in a CSV file (see 2020-03-11-ReSA-landscape.csv ), and we welcome contributions on the live spreadsheet that can be found via this link.},
	language = {eng},
	urldate = {2022-05-31},
	publisher = {Zenodo},
	author = {Katz, Daniel S. and Barker, Michelle and Martinez, Paula Andrea and Anzt, Hartwig and Gonzalez-Beltran, Alejandra and Bakker, Tom},
	month = mar,
	year = {2020},
	doi = {10.5281/zenodo.3699950},
	note = {Type: dataset},
	keywords = {Research Software, Communities, Landscape},
	file = {Zenodo Snapshot:C\:\\Users\\beld\\Zotero\\storage\\IS3EWGF4\\3699950.html:text/html},
}


@misc{noauthor_go_nodate,
	title = {{GO} {Build} {Charter} - {GO} {FAIR} {US}},
	url = {https://docs.google.com/document/d/1SNTcjQb_TDMuqc-kov0vNvcaOm6ZKYQT9-9qEe-_-6g/edit},
	abstract = {GO FAIR : GO BUILD Charter   The GO BUILD Pillar of GO FAIR US will focus on the development of a FAIR assessment framework and implementation guidance for research software hosting and sharing platforms. Particular focus will be given to the mechanism of badging for FAIR research software asses...},
	language = {en-GB},
	note = {(accessed 2022-05-31)},
	journal = {Google Docs},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\MD8QZURB\\edit.html:text/html},
}


@misc{ardcfair,
	title = {{FAIR} self assessment tool - {ARDC}},
	url = {https://ardc.edu.au/resources/aboutdata/fair-data/fair-self-assessment-tool/},
	note = {(accessed 2022-05-31)},
}

@misc{ardcfairsoftware,
	title = {Draft {Software} {FAIR} assessment template},
	url = {https://docs.google.com/spreadsheets/d/1_6olVmarOJp1nt7VpUHraicsTEpNsp_1-histomaNkg/edit},
	abstract = {FAIR assessment overview

Questions for each FAIR component ↓,Relevant principle,Guidance,Answer options: Increasingly FAIR --{\textgreater} (answers asume better than the previous)
FINDABLE
No question,Findable: Software, and its associated metadata, is easy to find for both humans and machines.
Q1,Does the ...},
	language = {en-GB},
	note = {(accessed 2022-05-31)},
	journal = {Google Docs},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\GVUYHCBH\\edit.html:text/html},
}

@article{allison_reproducibility_2016,
	title = {Reproducibility: {A} tragedy of errors},
	volume = {530},
	issn = {1476-4687},
	shorttitle = {Reproducibility},
	url = {http://www.nature.com/articles/530027a},
	doi = {10.1038/530027a},
	abstract = {Mistakes in peer-reviewed papers are easy to find but hard to fix, report David B. Allison and colleagues.},
	language = {en},
	number = {7588},
	urldate = {2022-06-01},
	journal = {Nature},
	author = {Allison, David B. and Brown, Andrew W. and George, Brandon J. and Kaiser, Kathryn A.},
	month = feb,
	year = {2016},
	note = {Number: 7588
Publisher: Nature Publishing Group},
	keywords = {Communication, Peer review, Publishing},
	pages = {27--29},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\N5X2EGIU\\Allison et al. - 2016 - Reproducibility A tragedy of errors.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\HR2DJUNN\\530027a.html:text/html},
}


@techreport{pico_fairsoft_2022,
	title = {{FAIRsoft} - {A} practical implementation of {FAIR} principles for research software},
	copyright = {© 2022, Posted by Cold Spring Harbor Laboratory. This pre-print is available under a Creative Commons License (Attribution-NoDerivs 4.0 International), CC BY-ND 4.0, as described at http://creativecommons.org/licenses/by-nd/4.0/},
	url = {https://www.biorxiv.org/content/10.1101/2022.05.04.490563v1},
	abstract = {Software plays a crucial and growing role in research. Unfortunately, the computational component in Life Sciences research is challenging to reproduce and verify most of the time. It could be undocumented, opaque, may even contain unknown errors that affect the outcome, or be directly unavailable, and impossible to use by others. These issues are detrimental to the overall quality of scientific research. One step to address this problem is the formulation of principles that research software in the domain should meet to ensure its quality and sustainability, resembling the FAIR (Findable, Accessible, Interoperable and Reusable) Data Principles. Within the ELIXIR infrastructure, OpenEBench aims to be an open platform providing both support for scientific benchmarking and an active observatory of software quality for the universe of Life Sciences research software. We present our initial proposal to instantiate a FAIR-like framework for assessing software quality as the first step toward the implementation of such an observatory in OpenEBench.},
	language = {en},
	urldate = {2022-05-31},
	institution = {bioRxiv},
	author = {Pico, Eva Martín del and Gelpí, Josep Lluís and Capella-Gutiérrez, Salvador},
	month = may,
	year = {2022},
	doi = {10.1101/2022.05.04.490563},
	pages = {2022.05.04.490563},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\3XUHS86N\\Pico et al. - 2022 - FAIRsoft - A practical implementation of FAIR prin.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\4UNEU3HW\\2022.05.04.html:text/html},
}


@inproceedings{shvachko_hadoop_2010,
	address = {Incline Village, NV, USA},
	title = {The {Hadoop} {Distributed} {File} {System}},
	isbn = {978-1-4244-7152-2},
	url = {http://ieeexplore.ieee.org/document/5496972/},
	doi = {10.1109/MSST.2010.5496972},
	abstract = {The Hadoop Distributed File System (HDFS) is designed to store very large data sets reliably, and to stream those data sets at high bandwidth to user applications. In a large cluster, thousands of servers both host directly attached storage and execute user application tasks. By distributing storage and computation across many servers, the resource can grow with demand while remaining economical at every size. We describe the architecture of HDFS and report on experience using HDFS to manage 25 petabytes of enterprise data at Yahoo!.},
	language = {en},
	urldate = {2022-08-07},
	booktitle = {2010 {IEEE} 26th {Symposium} on {Mass} {Storage} {Systems} and {Technologies} ({MSST})},
	publisher = {IEEE},
	author = {Shvachko, Konstantin and Kuang, Hairong and Radia, Sanjay and Chansler, Robert},
	month = may,
	year = {2010},
	pages = {1--10},
	file = {Shvachko et al. - 2010 - The Hadoop Distributed File System.pdf:C\:\\Users\\beld\\Zotero\\storage\\TZFEWW7Z\\Shvachko et al. - 2010 - The Hadoop Distributed File System.pdf:application/pdf},
}

@inproceedings{TensorFlow,
title	= {TensorFlow: A system for large-scale machine learning},
author	= {Martin Abadi and Paul Barham and Jianmin Chen and Zhifeng Chen and Andy Davis and Jeffrey Dean and Matthieu Devin and Sanjay Ghemawat and Geoffrey Irving and Michael Isard and Manjunath Kudlur and Josh Levenberg and Rajat Monga and Sherry Moore and Derek G. Murray and Benoit Steiner and Paul Tucker and Vijay Vasudevan and Pete Warden and Martin Wicke and Yuan Yu and Xiaoqiang Zheng},
year	= {2016},
URL	= {https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf},
booktitle	= {12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16)},
pages	= {265--283}
}

@misc{zenodo,
  doi = {10.25495/7GXK-RD71},
  url = {https://www.zenodo.org/},
  author = {{European Organization For Nuclear Research} and {OpenAIRE}},
  keywords = {FOS: Physical sciences, Publication, Dataset},
  language = {en},
  title = {Zenodo},
  publisher = {CERN},
  year = {2013}
}

@article{RDABerman2020Research,
	author = {Berman, Francine and Crosas, Merce},
	journal = {Harvard Data Science Review},
	number = {1},
	year = {2020},
	month = {jan 31},
	note = {https://hdsr.mitpress.mit.edu/pub/i4eo09f0},
	publisher = {},
	title = {The {Research} {Data} {Alliance}: Benefits and {Challenges} of {Building} a {Community} {Organization}},
	volume = {2},
}


@misc{alliance_task_2020,
	title = {Task forces},
	url = {https://www.researchsoft.org/taskforces/},
	abstract = {ReSA’s mission is to bring research software communities together to collaborate on the advancement of the research software ecosystem, to achieve the vision that research software and those who develop and maintain it are recognised and valued as fundamental and vital to research worldwide. To deliver on this mission, we invite the ReSA community to join us on ReSA activities stemming from the ReSA Strategic Plan- comments are welcome. Community consultations ReSA community consultations facilitate discussions to identify and prioritise challenges across ReSA’s three key themes: people, policy and infrastructure.},
	language = {en-uk},
	urldate = {2022-08-08},
	note = {(accessed 2022-08-08)},
	author = {Alliance, The Research Software},
	month = jul,
	year = {2020},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\DLMYTHMH\\taskforces.html:text/html},
}


@misc{force11_members,
	title = {Members – {FAIR} 4 {Research} {Software} ({FAIR4RS}) {Working} {Group} – {FORCE11}},
	url = {https://force11.org/groups/fair-4-research-software-fair4rs-working-group/},
	language = {en-US},
	urldate = {2022-08-08},
	note = {(accessed 2022-08-08)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\8I5SJ3YL\\fair-4-research-software-fair4rs-working-group.html:text/html},
}


@misc{uu_employee_pages,
	title = {Medewerkers - {Universiteit} {Utrecht}},
	url = {https://www.uu.nl/staff/Search},
	urldate = {2022-08-11},
	note = {(accessed 2022-08-11)},
	file = {Medewerkers - Universiteit Utrecht:C\:\\Users\\beld\\Zotero\\storage\\594DNC2M\\Search.html:text/html},
}


@misc{tno_about,
	title = {About {TNO}},
	url = {https://www.tno.nl/en/about-tno/},
	abstract = {We develop knowledge not for its own sake, but for practical application. Learn more about our mission statement and organisation.},
	language = {en},
	urldate = {2022-08-11},
	note = {(accessed 2022-08-11)},
	journal = {TNO},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\ID729UTB\\about-tno.html:text/html},
}

%%%% Other_refs
@software{de_Bruin_Scan_and_revieW_2021,
author = {de Bruin, Jonathan and Quach, Keven and Slewe, Christopher and Lamprecht, Anna-Lena},
month = {9},
title = {{Scan and revieW of Open Research Data and Software at Utrecht University}},
url = {https://github.com/UtrechtUniversity/SWORDS-UU},
version = {1.0.0},
year = {2021}
}

@book{10.5555/1593511,
 author = {Van Rossum, Guido and Drake, Fred L.},
 title = {Python 3 Reference Manual},
 year = {2009},
 isbn = {1441412697},
 publisher = {CreateSpace},
 address = {Scotts Valley, CA}
}

@inproceedings{di_cosmo_archiving_2020,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Archiving and {Referencing} {Source} {Code} with {Software} {Heritage}},
	isbn = {978-3-030-52200-1},
	doi = {10.1007/978-3-030-52200-1_36},
	abstract = {Software, and software source code in particular, is widely used in modern research. It must be properly archived, referenced, described and cited in order to build a stable and long lasting corpus of scientific knowledge. In this article we show how the Software Heritage universal source code archive provides a means to fully address the first two concerns, by archiving seamlessly all publicly available software source code, and by providing intrinsic persistent identifiers that allow to reference it at various granularities in a way that is at the same time convenient and effective.We call upon the research community to adopt widely this approach.},
	language = {en},
	booktitle = {Mathematical {Software} – {ICMS} 2020},
	publisher = {Springer International Publishing},
	author = {Di Cosmo, Roberto},
	editor = {Bigatti, Anna Maria and Carette, Jacques and Davenport, James H. and Joswig, Michael and de Wolff, Timo},
	year = {2020},
	keywords = {Reproducibility, Archival, Reference, Software source code},
	pages = {362--373},
	file = {Springer Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\4WQBRYCR\\Di Cosmo - 2020 - Archiving and Referencing Source Code with Softwar.pdf:application/pdf},
}

@article{haider_realization_2021,
	title = {Realization of best practices in software engineering and scientific writing through ready-to-use project skeletons},
	volume = {53},
	issn = {1572-817X},
	url = {https://doi.org/10.1007/s11082-021-03192-4},
	doi = {10.1007/s11082-021-03192-4},
	abstract = {Efforts in providing high-quality scientific software are hardly rewarded, as scientific output is typically measured in terms of publications in high ranking journals. As a result, scientific software is often developed without proper documentation and support of modern software design patterns. Ready-to-use project skeletons can be employed to accelerate the development process, while at the same time taking care of the implementation of best practices in software engineering. In this work, we revisit best practices in software engineering and review existing project skeletons. Special emphasis is given on the realization of best practices. Finally, we present a new project skeleton for scientific writing in , which takes care of the attainment of best practices, adapted for being used in academic publications.},
	language = {en},
	number = {10},
	urldate = {2022-03-11},
	journal = {Optical and Quantum Electronics},
	author = {Haider, Michael and Riesch, Michael and Jirauschek, Christian},
	month = sep,
	year = {2021},
	pages = {568},
	file = {Springer Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\ZLIQYIKU\\Haider et al. - 2021 - Realization of best practices in software engineer.pdf:application/pdf},
}

@article{scheliga_dealing_2019,
	title = {Dealing with research software: {Recommendations} for best practices},
	shorttitle = {Dealing with research software},
	url = {https://gfzpublic.gfz-potsdam.de/pubman/faces/ViewItemOverviewPage.jsp?itemId=item_3951898},
	doi = {10.2312/os.helmholtz.003},
	abstract = {Author: Scheliga, Katharina Sara et al.; Genre: Report; Finally published : 2019; Open Access; Title: Dealing with research software: Recommendations for best practices},
	language = {eng},
	urldate = {2022-04-17},
	author = {Scheliga, Katharina Sara and Pampel, H. and Konrad, Uwe and Fritzsch, Bernadette and Schlauch, Tobias and Nolden, Marco and zu Castell, Wolfgang and Finke, Ants and Hammitzsch, M. and Bertuch, Oliver and Denker, Michael},
	year = {2019},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\EVIARPKW\\Scheliga et al. - 2019 - Dealing with research software Recommendations fo.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\6T9WMU37\\ViewItemOverviewPage.html:text/html},
}

@article{garcia_castro_software_2020,
	title = {Software as a first-class citizen in research},
	url = {https://repository.publisso.de/resource/frl:6423290},
	doi = {10.4126/FRL01-006423290},
	abstract = {In recent years the importance of software in research has become increasingly recognized by the research community. This journey still has a long way to go. Research data is currently backed by a variety of efforts to implement and make FAIR principles a reality, complemented by Data Management Plans. Both FAIR data principles and management plans offer elements that could be useful for research software but none of them can be directly applied; in both cases there is a need for adaptation and then adoption. In this position paper we discuss current efforts around FAIR for research software that will also support the advancement of Software Management Plans. In turn, use of SMPs encourages researchers to make their datasets FAIR.},
	language = {en},
	urldate = {2022-04-17},
	author = {Garcia Castro, Leyla Jael and Barker, Michelle and Chue Hong, Neil and Psomopoulos, Fotis and Harrow, Jennifer and Katz, Daniel S. and Kuzak, Mateusz and Martinez, Paula Andrea and Via, Allegra},
	year = {2020},
	note = {Medium: application/pdf
Publisher: PUBLISSO},
	file = {Garcia Castro et al. - 2020 - Software as a first-class citizen in research.pdf:C\:\\Users\\beld\\Zotero\\storage\\HYZX3CTI\\Garcia Castro et al. - 2020 - Software as a first-class citizen in research.pdf:application/pdf},
}

@misc{akhmerov_making_2019,
	title = {Making {Research} {Software} a {First}-{Class} {Citizen} in {Research}},
	url = {https://zenodo.org/record/2647436},
	abstract = {The authors are listed alphabetically by order of last name. This presentation was collaboratively prepared for and given at a meeting with NWO (The Netherlands Organisation for Scientific Research; the national research council of the Netherlands) on 28 March 2019. Our aim was to highlight the importance of research software in contemporary research and its relationship to research data, open science, and reproducibility in research.  Our key messages to NWO: If open science is to lead towards better, more transparent, and reproducible research, then research software, research data and publications need all to be treated on equal footing at the policy level. NWO should make more explicit policies for supporting and evaluating research software. There are some differences when it comes to research software preservation (Software Sustainability) as compared to data preservation, but it shouldn’t be more difficult.},
	urldate = {2022-04-17},
	author = {Akhmerov, Anton and Cruz, Maria and Drost, Niels and Hof, Cees and Knapen, Tomas and Kuzak, Mateusz and Martinez-Ortiz, Carlos and Turkyilmaz-van der Velden, Yasemin},
	month = apr,
	year = {2019},
	doi = {10.5281/zenodo.2647436},
	keywords = {research software, software sustainability, RSE, FAIR software, open science, research data},
	file = {Zenodo Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\ZWIJ2U58\\Akhmerov et al. - 2019 - Making Research Software a First-Class Citizen in .pdf:application/pdf},
}

@misc{chue_hong_making_2019,
	type = {presentation},
	title = {Making {Software} {A} {First}-{Class} {Citizen}},
	url = {https://figshare.com/articles/presentation/Making_Software_A_First-Class_Citizen/9862835/1},
	abstract = {What are barriers to collaborating internationally on research software? How might we overcome them?},
	language = {en},
	urldate = {2022-04-17},
	author = {Chue Hong, Neil},
	month = sep,
	year = {2019},
	doi = {10.6084/m9.figshare.9862835.v1},
	note = {Publisher: figshare},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\6BPJKDQ7\\1.html:text/html},
}

@article{katz_community_2019,
	title = {Community {Organizations}: {Changing} the {Culture} in {Which} {Research} {Software} {Is} {Developed} and {Sustained}},
	volume = {21},
	issn = {1558-366X},
	shorttitle = {Community {Organizations}},
	doi = {10.1109/MCSE.2018.2883051},
	abstract = {Software is the key crosscutting technology that enables advances in mathematics, computer science, and domain-specific science and engineering to achieve robust simulations and analysis for science, engineering, and other research fields. However, software itself has not traditionally received focused attention from research communities; rather, software has evolved organically and inconsistently, with its development largely as by-products of other initiatives. Moreover, challenges in scientific software are expanding due to disruptive changes in computer hardware, increasing scale and complexity of data, and demands for more complex simulations involving multiphysics, multiscale modeling and outer-loop analysis. In recent years, community members have established a range of grass-roots organizations and projects to address these growing technical and social challenges in software productivity, quality, reproducibility, and sustainability. This article provides an overview of such groups and discusses opportunities to leverage their synergistic activities while nurturing work toward emerging software ecosystems.},
	number = {2},
	journal = {Computing in Science Engineering},
	author = {Katz, Daniel S. and McInnes, Lois Curfman and Bernholdt, David E. and Mayes, Abigail Cabunoc and Hong, Neil P. Chue and Duckles, Jonah and Gesing, Sandra and Heroux, Michael A. and Hettrick, Simon and Jimenez, Rafael C. and Pierce, Marlon and Weaver, Belinda and Wilkins-Diehr, Nancy},
	month = mar,
	year = {2019},
	note = {Conference Name: Computing in Science Engineering},
	keywords = {research software, scientific software, Ecosystems, Software, software sustainability, Collaboration, Computational modeling, Conferences, Organizations, software community culture, software ecosystems, software productivity, Sustainable development},
	pages = {8--24},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\beld\\Zotero\\storage\\U3T9TQ4Z\\8565942.html:text/html;Submitted Version:C\:\\Users\\beld\\Zotero\\storage\\2NCWTXAA\\Katz et al. - 2019 - Community Organizations Changing the Culture in W.pdf:application/pdf},
}


@book{chacon2014pro,
  title={Pro git},
  author={Chacon, Scott and Straub, Ben},
  year={2014},
  publisher={Apress}
}


@misc{github_rest,
	title = {{GitHub} {REST} {API}},
	url = {https://ghdocs-prod.azurewebsites.net/en/rest},
	abstract = {To create integrations, retrieve data, and automate your workflows, build with the GitHub REST API.},
	language = {en},
	note = {(accessed 2022-05-25)},
	journal = {GitHub Docs},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\257K3FSC\\rest.html:text/html},
}
@misc{noauthor_ghapi_nodate,
	title = {ghapi documentation reference},
	url = {https://ghapi.fast.ai/},
	note = {(accessed 2022-05-25)},
	file = {ghapi | ghapi:C\:\\Users\\beld\\Zotero\\storage\\MBE22N7Z\\ghapi.fast.ai.html:text/html},
}

@misc{fair4rsmetricswg,
	title = {{FAIR4RS} {Roadmap} {Metrics} {WG} charter},
	url = {https://docs.google.com/document/d/1BpzecVx4ZvSNfHD-UHhofZVdA6qiP_ENrmozmiq9zY4/edit},
	abstract = {FAIR4RS Roadmap Metrics Working Group Charter  Purpose The research sector needs a trusted process to evaluate the openness, accessibility, and reusability of research software. The Working Group aims to develop FAIR research software metrics, based on the community-endorsed Findable, Accessible,...},
	language = {en-GB},
	note = {(accessed 2022-05-31)},
	journal = {Google Docs},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\4C7P8WTH\\edit.html:text/html},
}


@software{Quach_Mapping-Research-Software-Landscapes-through-Exploratory-Studies-of-GitHub-Data_2022,
author = {Quach, Keven},
month = {5},
title = {{Mapping-Research-Software-Landscapes-through-Exploratory-Studies-of-GitHub-Data}},
url = {https://github.com/kequach/Thesis-Mapping-RS},
version = {1.0.0},
year = {2022}
}

@article{preston2013semantic,
  title={Semantic Versioning 2.0.0},
  author={Preston-Werner, Tom},
  journal={l{\'\i}nea]. Available: http://semver.org},
  year={2013}
}

@misc{cure-faircase,
	title = {CURE-FAIR WG: Case Statement},
	url = {https://www.rd-alliance.org/sites/default/files/case_statement/CURE_FAIR_WG_CaseStatement_9October2020v2.pdf},
	language = {eng},
	note = {(accessed 2022-05-31)},
	author = {WG, CURE-FAIR},
	month = oct,
	year = {2020}
}
%%%% ---- Other refs



@misc{kosub_note_2016,
	title = {A note on the triangle inequality for the {Jaccard} distance},
	url = {http://arxiv.org/abs/1612.02696},
	abstract = {Two simple proofs of the triangle inequality for the Jaccard distance in terms of nonnegative, monotone, submodular functions are given and discussed.},
	urldate = {2022-08-18},
	publisher = {arXiv},
	author = {Kosub, Sven},
	month = dec,
	year = {2016},
	note = {arXiv:1612.02696 [cs, stat]},
	keywords = {Computer Science - Discrete Mathematics, Computer Science - Information Retrieval, Computer Science - Machine Learning, Statistics - Machine Learning},
	file = {arXiv Fulltext PDF:C\:\\Users\\beld\\Zotero\\storage\\TMHH3AVK\\Kosub - 2016 - A note on the triangle inequality for the Jaccard .pdf:application/pdf;arXiv.org Snapshot:C\:\\Users\\beld\\Zotero\\storage\\EJR3H7LC\\1612.html:text/html},
}


@article{huberty_multivariate_1989,
	title = {Multivariate {Analysis} {Versus} {Multiple} {Univariate} {Analyses}},
	volume = {105},
	doi = {10.1037/0033-2909.105.2.302},
	abstract = {The argument for preceding multiple analysis of variance (\{anovas\}) with a multivariate analysis of variance (\{manova\}) to control for Type I error is challenged. Several situations are discussed in which multiple \{anovas\} might be conducted without the necessity of a preliminary \{manova\}. Three reasons for considering multivariate analysis are discussed: to identify outcome variable system constructs, to select variable subsets, and to determine variable relative worth. (PsycINFO Database Record (c) 2012 APA, all rights reserved)},
	journal = {Psychological Bulletin},
	author = {Huberty, Carl and Morris, John},
	month = mar,
	year = {1989},
	pages = {302--308},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\RFP7NWJA\\Huberty and Morris - 1989 - Multivariate Analysis Versus Multiple Univariate A.pdf:application/pdf},
}


@article{anderson_new_2001,
	title = {A new method for non-parametric multivariate analysis of variance},
	volume = {26},
	issn = {1442-9993},
	url = {http://onlinelibrary.wiley.com/doi/abs/10.1111/j.1442-9993.2001.01070.pp.x},
	doi = {10.1111/j.1442-9993.2001.01070.pp.x},
	abstract = {Hypothesis-testing methods for multivariate data are needed to make rigorous probability statements about the effects of factors and their interactions in experiments. Analysis of variance is particularly powerful for the analysis of univariate data. The traditional multivariate analogues, however, are too stringent in their assumptions for most ecological multivariate data sets. Non-parametric methods, based on permutation tests, are preferable. This paper describes a new non-parametric method for multivariate analysis of variance, after McArdle and Anderson (in press). It is given here, with several applications in ecology, to provide an alternative and perhaps more intuitive formulation for ANOVA (based on sums of squared distances) to complement the description provided by McArdle and Anderson (in press) for the analysis of any linear model. It is an improvement on previous non-parametric methods because it allows a direct additive partitioning of variation for complex models. It does this while maintaining the flexibility and lack of formal assumptions of other non-parametric methods. The test-statistic is a multivariate analogue to Fisher’s F-ratio and is calculated directly from any symmetric distance or dissimilarity matrix. P-values are then obtained using permutations. Some examples of the method are given for tests involving several factors, including factorial and hierarchical (nested) designs and tests of interactions.},
	language = {en},
	number = {1},
	urldate = {2022-08-24},
	journal = {Austral Ecology},
	author = {Anderson, Marti J.},
	year = {2001},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.1442-9993.2001.01070.pp.x},
	keywords = {ANOVA, distance measure, experimental design, linear model, multifactorial, multivariate dissimilarity, partitioning, permutation tests, statistics},
	pages = {32--46},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\2N9NGWM9\\Anderson - 2001 - A new method for non-parametric multivariate analy.pdf:application/pdf;Snapshot:C\:\\Users\\beld\\Zotero\\storage\\57D32BUF\\j.1442-9993.2001.01070.pp.html:text/html},
}


@misc{alexis_answer_2015,
	title = {Answer to "{Bonferroni} correction on multiple {Kruskal}-{Wallis} tests"},
	url = {https://stats.stackexchange.com/a/133449/261994},
	urldate = {2022-08-24},
	journal = {Cross Validated},
	author = {Alexis},
	month = jan,
	year = {2015},
	note = {(accessed 2022-08-24)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\Q5LEXUD2\\133449.html:text/html},
}


@article{katz_multivariate_1980,
	title = {A {Multivariate} {Kruskal}-{Wallis} {Test} {With} {Post} {Hoc} {Procedures}},
	volume = {15},
	issn = {0027-3171},
	doi = {10.1207/s15327906mbr1503_4},
	abstract = {An explicit statement of a statistic which is a nonparametric analogue to one-way MANOVA is presented. The statistic is a multivariate extension of the nonparametric Kruskal-Wallis test (1952). The large sample reference distribution of the test statistic is derived together with a set of computational formulas for the test statistic. In addition two post hoc procedures are developed and compared. The statistic and its post hoc procedures are illustrated with a data example from the behavioral sciences.},
	language = {eng},
	number = {3},
	journal = {Multivariate Behavioral Research},
	author = {Katz, B. M. and McSweeney, M.},
	month = jul,
	year = {1980},
	pmid = {26794183},
	pages = {281--297},
}



@article{akinwande_variance_2015,
	title = {Variance {Inflation} {Factor}: {As} a {Condition} for the {Inclusion} of {Suppressor} {Variable}(s) in {Regression} {Analysis}},
	volume = {05},
	shorttitle = {Variance {Inflation} {Factor}},
	doi = {10.4236/ojs.2015.57075},
	abstract = {Suppression effect in multiple regression analysis may be more common in research than what is currently recognized. We have reviewed several literatures of interest which treats the concept and types of suppressor variables. Also, we have highlighted systematic ways to identify suppression effect in multiple regressions using statistics such as: R 2 , sum of squares, regression weight and comparing zero-order correlations with Variance Inflation Factor (VIF) respectively. We also establish that suppression effect is a function of multicollinearity; however, a suppressor variable should only be allowed in a regression analysis if its VIF is less than five (5).},
	journal = {Open Journal of Statistics},
	author = {Akinwande, Olusegun and Dikko, H.G and Agboola, Samson},
	month = jan,
	year = {2015},
	pages = {754--767},
	file = {Full Text PDF:C\:\\Users\\beld\\Zotero\\storage\\B7VKLSW9\\Akinwande et al. - 2015 - Variance Inflation Factor As a Condition for the .pdf:application/pdf},
}


@article{scikit-learn,
 title={Scikit-learn: Machine Learning in {P}ython},
 author={Pedregosa, F. and Varoquaux, G. and Gramfort, A. and Michel, V.
         and Thirion, B. and Grisel, O. and Blondel, M. and Prettenhofer, P.
         and Weiss, R. and Dubourg, V. and Vanderplas, J. and Passos, A. and
         Cournapeau, D. and Brucher, M. and Perrot, M. and Duchesnay, E.},
 journal={Journal of Machine Learning Research},
 volume={12},
 pages={2825--2830},
 year={2011}
}

@misc{noauthor_badgeapp_nodate,
	title = {{BadgeApp}},
	url = {https://bestpractices.coreinfrastructure.org/en},
	urldate = {2022-10-05},
	note = {(accessed 2022-10-05)},
	file = {BadgeApp:C\:\\Users\\beld\\Zotero\\storage\\PUXP42YH\\en.html:text/html},
}


@misc{noauthor_r_nodate,
	title = {R {Data} {Café} - {Applied} {Data} {Science} - {Utrecht} {University}},
	url = {https://www.uu.nl/en/research/applied-data-science/r-data-cafe},
	abstract = {During this informal meetup, we will help each other with R programming, data handling and cleaning challenges.},
	language = {en},
	urldate = {2022-10-08},
	note = {(accessed 2022-10-08)},
	file = {Snapshot:C\:\\Users\\beld\\Zotero\\storage\\9EQC3V52\\r-data-cafe.html:text/html},
}
